name: 🚀 Build File Scanner GUI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact_name: file-scanner-gui-windows
            executable_name: "File Scanner GUI.exe"
            
          - os: ubuntu-latest
            artifact_name: file-scanner-gui-linux
            executable_name: "file-scanner-gui"
            
          - os: macos-latest
            artifact_name: file-scanner-gui-macos
            executable_name: "File Scanner GUI.app"

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: 🔨 Build executable
      run: |
        pyinstaller --onefile --windowed --name "File Scanner GUI" file_scanner_gui.py

    - name: 🛠 Debug - List dist contents
      run: |
        echo "Contents of dist directory:"
        ls -la dist/ || dir dist\
      shell: bash

    - name: 📂 Prepare release directory
      run: |
        mkdir release
      shell: bash

    - name: 📂 Copy executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy "dist\File Scanner GUI.exe" "release\"
      shell: cmd

    - name: 📂 Copy executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cp "dist/File Scanner GUI" "release/file-scanner-gui"
        chmod +x "release/file-scanner-gui"

    - name: 📂 Copy executable (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cp -R "dist/File Scanner GUI.app" "release/"

    - name: 🛠 Debug - List release contents
      run: |
        echo "Contents of release directory:"
        ls -la release/
      shell: bash

    - name: 🗜️ Create ZIP archive
      run: |
        cd release
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          powershell "Compress-Archive -Path 'File Scanner GUI.exe' -DestinationPath '../${{ matrix.artifact_name }}.zip'"
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          zip -r "../${{ matrix.artifact_name }}.zip" "File Scanner GUI.app"
        else
          zip "../${{ matrix.artifact_name }}.zip" "file-scanner-gui"
        fi
        cd ..
        ls -la *.zip
      shell: bash

    - name: 📤 Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.zip
        retention-days: 30

    - name: 📋 Build summary
      run: |
        echo "✅ Build completed for ${{ matrix.os }}"
        echo "📦 Artifact: ${{ matrix.artifact_name }}.zip"
        echo "🎯 Ready for download!"

  # Создание релиза с загрузкой файлов
  release:
    name: 🎉 Upload to Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: 📥 Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: file-scanner-gui-windows
        path: ./

    - name: 📥 Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: file-scanner-gui-linux
        path: ./

    - name: 📥 Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: file-scanner-gui-macos
        path: ./

    - name: 📋 List downloaded files
      run: |
        echo "Downloaded files:"
        ls -la *.zip

    - name: 🚀 Upload to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          file-scanner-gui-windows.zip
          file-scanner-gui-linux.zip
          file-scanner-gui-macos.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Уведомление об успехе
  notify:
    name: 📢 Success Notification
    needs: build
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: 🎊 Success message
      run: |
        echo "🎉 All builds completed successfully!"
        echo ""
        echo "📦 Available downloads:"
        echo "  • Windows: file-scanner-gui-windows.zip" 
        echo "  • Linux:   file-scanner-gui-linux.zip"
        echo "  • macOS:   file-scanner-gui-macos.zip"
        echo ""
        echo "🎯 Ready for distribution!"

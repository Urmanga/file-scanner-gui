import tkinter as tk
from tkinter import ttk, filedialog, messagebox, Menu
import os
import json
import csv
from pathlib import Path
from datetime import datetime
import threading
import webbrowser
import re
import requests

print("üöÄ –§–ê–ô–õ-–°–ö–ê–ù–ï–† v1.0 –° AI –¢–ï–ì–ê–ú–ò –ó–ê–ì–†–£–ñ–ï–ù!", datetime.now())

class FileScannerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–§–∞–π–ª-–°–∫–∞–Ω–µ—Ä v1.0")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)
        
        # –î–∞–Ω–Ω—ã–µ
        self.files_data = []
        self.scanning = False
        self.scan_progress = 0
        self.total_files_to_scan = 0
        
        # AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.ai_enabled = tk.BooleanVar(value=True)
        self.openai_enabled = tk.BooleanVar(value=False)
        self.openai_api_key = tk.StringVar()
        self.openai_model = tk.StringVar(value="gpt-3.5-turbo")
        self.daily_limit = tk.StringVar(value="1.00")
        self.tokens_used_today = 0
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ AI –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.ai_mode = tk.StringVar(value="hybrid")
        self.ai_for_unknown = tk.BooleanVar(value=True)
        self.ai_for_documents = tk.BooleanVar(value=True)
        self.ai_for_projects = tk.BooleanVar(value=False)
        self.enable_cache = tk.BooleanVar(value=True)
        
        # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        self.dark_theme = False
        
        # AI —Ç–µ–≥–∏
        self.ai_tag_patterns = self.load_ai_patterns()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        self.setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.setup_hotkeys()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.load_settings()
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        self.style = ttk.Style()
        
        available_themes = self.style.theme_names()
        if 'clam' in available_themes:
            self.style.theme_use('clam')
        elif 'alt' in available_themes:
            self.style.theme_use('alt')
        
        self.apply_theme()
    
    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º—É"""
        if self.dark_theme:
            self.root.configure(bg='#1e1e1e')
            self.style.theme_use('clam')
            
            self.style.configure('TLabel', background='#1e1e1e', foreground='#ffffff')
            self.style.configure('TFrame', background='#1e1e1e')
            self.style.configure('TLabelFrame', background='#1e1e1e', foreground='#ffffff', 
                               borderwidth=1, relief='solid')
            self.style.configure('TLabelFrame.Label', background='#1e1e1e', foreground='#ffffff')
            
            self.style.configure('TButton', 
                               background='#404040', 
                               foreground='#ffffff',
                               borderwidth=1,
                               focuscolor='#505050')
            self.style.map('TButton',
                          background=[('active', '#505050'), ('pressed', '#606060')])
            
            self.style.configure('TEntry', 
                               background='#2d2d2d', 
                               foreground='#ffffff',
                               insertcolor='#ffffff',
                               borderwidth=1,
                               fieldbackground='#2d2d2d')
            
            self.style.configure('TCheckbutton', 
                               background='#1e1e1e', 
                               foreground='#ffffff',
                               focuscolor='none')
            
            self.style.configure('Treeview', 
                               background='#2d2d2d', 
                               foreground='#ffffff', 
                               fieldbackground='#2d2d2d',
                               borderwidth=1)
            self.style.configure('Treeview.Heading', 
                               background='#404040', 
                               foreground='#ffffff',
                               borderwidth=1)
            self.style.map('Treeview',
                          background=[('selected', '#0078d4')])
            
            self.style.configure('TProgressbar',
                               background='#0078d4',
                               troughcolor='#404040',
                               borderwidth=1)
            
            self.style.configure('Vertical.TScrollbar',
                               background='#404040',
                               troughcolor='#2d2d2d',
                               borderwidth=1)
            self.style.configure('Horizontal.TScrollbar',
                               background='#404040',
                               troughcolor='#2d2d2d',
                               borderwidth=1)
        else:
            self.root.configure(bg='SystemButtonFace')
            self.style.theme_use('clam')
            
            self.style.configure('TLabel', background='SystemButtonFace', foreground='black')
            self.style.configure('TFrame', background='SystemButtonFace')
            self.style.configure('TLabelFrame', background='SystemButtonFace', foreground='black')
            self.style.configure('TButton', background='SystemButtonFace', foreground='black')
            self.style.configure('TEntry', background='white', foreground='black')
            self.style.configure('TCheckbutton', background='SystemButtonFace', foreground='black')
            self.style.configure('Treeview', background='white', foreground='black', fieldbackground='white')
            self.style.configure('Treeview.Heading', background='SystemButtonFace', foreground='black')
            
            self.style.map('TButton', background=[], foreground=[])
            self.style.map('Treeview', background=[])
    
    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"""
        self.dark_theme = not self.dark_theme
        self.apply_theme()
    
    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        self.root.bind('<F5>', lambda e: self.start_scan())
        self.root.bind('<Control-s>', lambda e: self.save_json())
        self.root.bind('<Control-t>', lambda e: self.save_txt())
        self.root.bind('<Control-e>', lambda e: self.save_csv_auto())
        self.root.bind('<Delete>', lambda e: self.clear_results())
        self.root.bind('<F3>', lambda e: self.show_search_dialog())
        self.root.bind('<Control-f>', lambda e: self.show_filter_dialog())
        self.root.bind('<Control-q>', lambda e: self.toggle_theme())
        self.root.bind('<F1>', lambda e: self.show_help())
        self.root.bind('<F2>', lambda e: self.show_ai_settings())
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (900 // 2)
        y = (self.root.winfo_screenheight() // 2) - (700 // 2)
        self.root.geometry(f"900x700+{x}+{y}")
    
    def load_ai_patterns(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è AI —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'work': {
                'patterns': ['–æ—Ç—á–µ—Ç', 'report', '–¥–æ–≥–æ–≤–æ—Ä', 'contract', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', 'presentation', 
                           'meeting', '—Å–æ–≤–µ—â–∞–Ω–∏–µ', 'budget', '–±—é–¥–∂–µ—Ç', '–ø–ª–∞–Ω', 'plan', 'invoice', '—Å—á–µ—Ç'],
                'tags': ['—Ä–∞–±–æ—Ç–∞', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–æ—Ñ–∏—Å']
            },
            'coding': {
                'patterns': [r'\.py$', r'\.js$', r'\.html$', r'\.css$', r'\.cpp$', r'\.java$', 'src', 'code', 
                           'project', '–ø—Ä–æ–µ–∫—Ç', 'git', 'repo', 'api', 'app'],
                'tags': ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞']
            },
            'media': {
                'patterns': [r'\.mp4$', r'\.avi$', r'\.jpg$', r'\.png$', r'\.mp3$', 'photo', 'video', 
                           '—Ñ–æ—Ç–æ', '–≤–∏–¥–µ–æ', 'music', '–º—É–∑—ã–∫–∞', 'movie', '—Ñ–∏–ª—å–º'],
                'tags': ['–º–µ–¥–∏–∞', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–∫–æ–Ω—Ç–µ–Ω—Ç']
            },
            'personal': {
                'patterns': ['vacation', '–æ—Ç–ø—É—Å–∫', 'family', '—Å–µ–º—å—è', 'birthday', '–¥–µ–Ω—å_—Ä–æ–∂–¥–µ–Ω–∏—è',
                           'personal', '–ª–∏—á–Ω–æ–µ', 'diary', '–¥–Ω–µ–≤–Ω–∏–∫', 'home', '–¥–æ–º'],
                'tags': ['–ª–∏—á–Ω–æ–µ', '—Å–µ–º—å—è', '–±—ã—Ç']
            },
            'education': {
                'patterns': ['study', '—É—á–µ–±–∞', 'homework', '–¥–æ–º–∞—à–∫–∞', 'exam', '—ç–∫–∑–∞–º–µ–Ω', 'course', 
                           '–∫—É—Ä—Å', 'lecture', '–ª–µ–∫—Ü–∏—è', 'university', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', 'school'],
                'tags': ['—É—á–µ–±–∞', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–∑–Ω–∞–Ω–∏—è']
            },
            'games': {
                'patterns': ['game', '–∏–≥—Ä–∞', 'steam', r'\.exe$', 'mod', '–º–æ–¥', 'save', '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ',
                           'minecraft', 'gta', 'cs', 'wow'],
                'tags': ['–∏–≥—Ä—ã', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–¥–æ—Å—É–≥']
            },
            'archive': {
                'patterns': [r'\.zip$', r'\.rar$', r'\.7z$', 'backup', '–±—ç–∫–∞–ø', 'archive', '–∞—Ä—Ö–∏–≤',
                           'old', '—Å—Ç–∞—Ä—ã–π', 'copy', '–∫–æ–ø–∏—è'],
                'tags': ['–∞—Ä—Ö–∏–≤', '–±—ç–∫–∞–ø', '—Ö—Ä–∞–Ω–µ–Ω–∏–µ']
            },
            'temp': {
                'patterns': ['temp', 'tmp', 'cache', '–∫—ç—à', r'\.log$', r'\.tmp$', r'~\$', 
                           '–Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç', 'new document', 'untitled'],
                'tags': ['–≤—Ä–µ–º–µ–Ω–Ω—ã–µ', '–º—É—Å–æ—Ä', '—É–¥–∞–ª–∏—Ç—å']
            }
        }
    
    def generate_ai_tags(self, file_info):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI —Ç–µ–≥–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞"""
        if not self.ai_enabled.get():
            return []
        
        filename = file_info['name'].lower()
        filepath = file_info['full_path'].lower()
        extension = file_info['extension'].lower()
        
        tags = set()
        
        for category, data in self.ai_tag_patterns.items():
            for pattern in data['patterns']:
                if re.search(pattern, filename) or re.search(pattern, filepath):
                    tags.update(data['tags'])
                    break
        
        size_mb = file_info['size_mb']
        if size_mb > 1000:
            tags.add('–±–æ–ª—å—à–æ–π')
        elif size_mb > 100:
            tags.add('—Å—Ä–µ–¥–Ω–∏–π')
        else:
            tags.add('–º–∞–ª–µ–Ω—å–∫–∏–π')
        
        try:
            modified_date = datetime.strptime(file_info['modified_date'], '%Y-%m-%d %H:%M:%S')
            days_old = (datetime.now() - modified_date).days
            
            if days_old < 7:
                tags.add('–Ω–æ–≤—ã–π')
            elif days_old < 30:
                tags.add('–Ω–µ–¥–∞–≤–Ω–∏–π')
            elif days_old > 365:
                tags.add('—Å—Ç–∞—Ä—ã–π')
        except:
            pass
        
        if extension in ['.exe', '.msi', '.dmg']:
            tags.add('–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
        elif extension in ['.txt', '.doc', '.docx', '.pdf']:
            tags.add('–¥–æ–∫—É–º–µ–Ω—Ç')
        elif extension in ['.jpg', '.png', '.gif', '.bmp']:
            tags.add('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
        elif extension in ['.mp3', '.wav', '.flac']:
            tags.add('–∞—É–¥–∏–æ')
        elif extension in ['.mp4', '.avi', '.mkv']:
            tags.add('–≤–∏–¥–µ–æ')
        
        return list(tags)[:5]
    
    def generate_openai_tags(self, file_info):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ OpenAI API"""
        if not self.openai_enabled.get() or not self.openai_api_key.get():
            return []
        
        try:
            daily_limit = float(self.daily_limit.get())
            estimated_cost = 0.0015 * 100 / 1000
            
            if estimated_cost > daily_limit:
                print(f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: ${estimated_cost:.4f} > ${daily_limit}")
                return []
            
            filename = file_info['name']
            file_extension = file_info['extension']
            file_size = file_info['size_mb']
            
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–π –¥–æ 5 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–≥–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

–ò–º—è —Ñ–∞–π–ª–∞: {filename}
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_extension}
–†–∞–∑–º–µ—Ä: {file_size} MB

–°–æ–∑–¥–∞–π —Ç–µ–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç:
- –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–¥–æ–∫—É–º–µ–Ω—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ–¥, etc.)
- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ (—Ä–∞–±–æ—Ç–∞, –ª–∏—á–Ω–æ–µ, —É—á–µ–±–∞, etc.)
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (–±–æ–ª—å—à–æ–π, –≤–∞–∂–Ω—ã–π, etc.)

–û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""
            
            headers = {
                'Authorization': f'Bearer {self.openai_api_key.get()}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'model': self.openai_model.get(),
                'messages': [{'role': 'user', 'content': prompt}],
                'max_tokens': 100,
                'temperature': 0.3
            }
            
            response = requests.post(
                'https://api.openai.com/v1/chat/completions',
                headers=headers,
                json=data,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                content = result['choices'][0]['message']['content'].strip()
                tags = [tag.strip() for tag in content.split(',') if tag.strip()]
                self.tokens_used_today += result.get('usage', {}).get('total_tokens', 0)
                return tags[:5]
            else:
                print(f"OpenAI API Error: {response.status_code} - {response.text}")
                return []
                
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI: {e}")
            return []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
            return []
    
    def combine_ai_tags(self, file_info):
        """–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏ OpenAI —Ç–µ–≥–∏"""
        local_tags = self.generate_ai_tags(file_info)
        openai_tags = self.generate_openai_tags(file_info)
        all_tags = list(set(local_tags + openai_tags))
        return all_tags[:7]
    
    def save_json(self):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON"""
        self.save_file_auto('json')
    
    def save_txt(self):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ TXT"""
        self.save_file_auto('txt')
    
    def save_csv_auto(self):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV"""
        self.save_file_auto('csv')
    
    def get_settings_file(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        script_dir = os.path.dirname(os.path.abspath(__file__))
        return os.path.join(script_dir, 'ai_settings.json')
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        settings = {
            'ai_enabled': self.ai_enabled.get(),
            'openai_enabled': self.openai_enabled.get(),
            'openai_api_key': self.openai_api_key.get(),
            'openai_model': self.openai_model.get(),
            'daily_limit': self.daily_limit.get(),
            'ai_mode': self.ai_mode.get(),
            'ai_for_unknown': self.ai_for_unknown.get(),
            'ai_for_documents': self.ai_for_documents.get(),
            'ai_for_projects': self.ai_for_projects.get(),
            'enable_cache': self.enable_cache.get(),
            'ai_tag_patterns': self.ai_tag_patterns,
            'dark_theme': self.dark_theme
        }
        
        try:
            with open(self.get_settings_file(), 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            settings_file = self.get_settings_file()
            if not os.path.exists(settings_file):
                return
            
            with open(settings_file, 'r', encoding='utf-8') as f:
                settings = json.load(f)
            
            self.ai_enabled.set(settings.get('ai_enabled', True))
            self.openai_enabled.set(settings.get('openai_enabled', False))
            self.openai_api_key.set(settings.get('openai_api_key', ''))
            self.openai_model.set(settings.get('openai_model', 'gpt-3.5-turbo'))
            self.daily_limit.set(settings.get('daily_limit', '1.00'))
            self.ai_mode.set(settings.get('ai_mode', 'hybrid'))
            self.ai_for_unknown.set(settings.get('ai_for_unknown', True))
            self.ai_for_documents.set(settings.get('ai_for_documents', True))
            self.ai_for_projects.set(settings.get('ai_for_projects', False))
            self.enable_cache.set(settings.get('enable_cache', True))
            
            if 'ai_tag_patterns' in settings:
                self.ai_tag_patterns.update(settings['ai_tag_patterns'])
            
            if settings.get('dark_theme', False):
                self.dark_theme = True
                self.apply_theme()
            
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ ai_settings.json")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(5, weight=1)
        
        header_frame = ttk.Frame(main_frame)
        header_frame.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        title_label = ttk.Label(header_frame, text="üóÇÔ∏è –§–∞–π–ª-–°–∫–∞–Ω–µ—Ä v1.0 —Å AI", font=('Arial', 16, 'bold'))
        title_label.pack(side=tk.LEFT)
        
        theme_button = ttk.Button(header_frame, text="üåô", command=self.toggle_theme, width=3)
        theme_button.pack(side=tk.RIGHT, padx=(20, 0))
        
        folder_frame = ttk.LabelFrame(main_frame, text="–í—ã–±–æ—Ä –ø–∞–ø–∫–∏", padding="10")
        folder_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        folder_frame.columnconfigure(1, weight=1)
        
        ttk.Label(folder_frame, text="–ü–∞–ø–∫–∞:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        
        self.folder_var = tk.StringVar()
        self.folder_entry = ttk.Entry(folder_frame, textvariable=self.folder_var, font=('Arial', 10))
        self.folder_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        
        ttk.Button(folder_frame, text="–û–±–∑–æ—Ä...", command=self.browse_folder).grid(row=0, column=2)
        
        settings_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", padding="10")
        settings_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        options_frame = ttk.Frame(settings_frame)
        options_frame.grid(row=0, column=0, columnspan=2, sticky=tk.W)
        
        self.include_hidden = tk.BooleanVar()
        ttk.Checkbutton(options_frame, text="–í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã", 
                       variable=self.include_hidden).grid(row=0, column=0, sticky=tk.W, padx=(0, 20))
        
        self.show_details = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", 
                       variable=self.show_details).grid(row=0, column=1, sticky=tk.W)
        
        ttk.Label(options_frame, text="ü§ñ AI: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ F2", 
                 font=('Arial', 8)).grid(row=0, column=2, sticky=tk.W, padx=(20, 0))
        
        ttk.Label(settings_frame, text="–§–∏–ª—å—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:").grid(row=1, column=0, sticky=tk.W, pady=(10, 0))
        
        self.extensions_var = tk.StringVar()
        extensions_entry = ttk.Entry(settings_frame, textvariable=self.extensions_var, width=40)
        extensions_entry.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=(10, 0))
        
        ttk.Label(settings_frame, text="(–Ω–∞–ø—Ä–∏–º–µ—Ä: .txt .py .jpg)", font=('Arial', 8)).grid(
            row=2, column=1, sticky=tk.W, padx=(10, 0), pady=(2, 0))
        
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.grid(row=3, column=0, columnspan=3, pady=(0, 10))
        
        self.scan_button = ttk.Button(buttons_frame, text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å (F5)", 
                                     command=self.start_scan)
        self.scan_button.grid(row=0, column=0, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üíæ JSON (Ctrl+S)", 
                  command=self.save_json).grid(row=0, column=1, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üìä CSV", 
                  command=self.save_csv_auto).grid(row=0, column=2, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üìÑ TXT (Ctrl+T)", 
                  command=self.save_txt).grid(row=0, column=3, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üîç –ü–æ–∏—Å–∫ (F3)", 
                  command=self.show_search_dialog).grid(row=0, column=4, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="‚öôÔ∏è AI –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.show_ai_settings).grid(row=0, column=5, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", 
                  command=self.clear_results).grid(row=0, column=6, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="‚ùì –°–ø—Ä–∞–≤–∫–∞ (F1)", 
                  command=self.show_help).grid(row=0, column=7)
        
        progress_frame = ttk.Frame(main_frame)
        progress_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        progress_frame.columnconfigure(0, weight=1)
        
        self.progress = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
        progress_label = ttk.Label(progress_frame, textvariable=self.progress_var)
        progress_label.grid(row=1, column=0)
        
        results_frame = ttk.LabelFrame(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", padding="5")
        results_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        results_frame.columnconfigure(0, weight=1)
        results_frame.rowconfigure(1, weight=1)
        
        self.stats_var = tk.StringVar(value="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        stats_label = ttk.Label(results_frame, textvariable=self.stats_var, font=('Arial', 10, 'bold'))
        stats_label.grid(row=0, column=0, sticky=tk.W, pady=(0, 5))
        
        columns = ('name', 'path', 'size', 'extension', 'modified', 'tags')
        self.tree = ttk.Treeview(results_frame, columns=columns, show='headings', height=15)
        
        self.tree.heading('name', text='–ò–º—è —Ñ–∞–π–ª–∞ ‚ñ≤‚ñº', command=lambda: self.sort_column('name'))
        self.tree.heading('path', text='–ü—É—Ç—å ‚ñ≤‚ñº', command=lambda: self.sort_column('path'))
        self.tree.heading('size', text='–†–∞–∑–º–µ—Ä (MB) ‚ñ≤‚ñº', command=lambda: self.sort_column('size'))
        self.tree.heading('extension', text='–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ‚ñ≤‚ñº', command=lambda: self.sort_column('extension'))
        self.tree.heading('modified', text='–ò–∑–º–µ–Ω–µ–Ω ‚ñ≤‚ñº', command=lambda: self.sort_column('modified'))
        self.tree.heading('tags', text='ü§ñ AI –¢–µ–≥–∏ ‚ñ≤‚ñº', command=lambda: self.sort_column('tags'))
        
        self.tree.column('name', width=150)
        self.tree.column('path', width=250)
        self.tree.column('size', width=80)
        self.tree.column('extension', width=80)
        self.tree.column('modified', width=120)
        self.tree.column('tags', width=200)
        
        self.sort_column_name = None
        self.sort_reverse = False
        
        v_scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(results_frame, orient=tk.HORIZONTAL, command=self.tree.xview)
        self.tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        self.tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        v_scrollbar.grid(row=1, column=1, sticky=(tk.N, tk.S))
        h_scrollbar.grid(row=2, column=0, sticky=(tk.W, tk.E))
        
        self.create_context_menu()
    
    def sort_column(self, column):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–∫–∏"""
        if self.sort_column_name == column:
            self.sort_reverse = not self.sort_reverse
        else:
            self.sort_reverse = False
            self.sort_column_name = column
        
        data = []
        for child in self.tree.get_children():
            values = self.tree.item(child)['values']
            data.append((child, values))
        
        if column == 'name':
            data.sort(key=lambda x: x[1][0].lower(), reverse=self.sort_reverse)
        elif column == 'path':
            data.sort(key=lambda x: x[1][1].lower(), reverse=self.sort_reverse)
        elif column == 'size':
            data.sort(key=lambda x: float(str(x[1][2]).replace(' üî¥', '').replace(' üü°', '').replace(' üü¢', '')) if x[1][2] else 0, reverse=self.sort_reverse)
        elif column == 'extension':
            data.sort(key=lambda x: x[1][3].lower(), reverse=self.sort_reverse)
        elif column == 'modified':
            data.sort(key=lambda x: x[1][4], reverse=self.sort_reverse)
        elif column == 'tags':
            data.sort(key=lambda x: x[1][5], reverse=self.sort_reverse)
        
        for index, (child, values) in enumerate(data):
            self.tree.move(child, '', index)
        
        self.update_column_headers()
    
    def update_column_headers(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        headers = {
            'name': '–ò–º—è —Ñ–∞–π–ª–∞',
            'path': '–ü—É—Ç—å', 
            'size': '–†–∞–∑–º–µ—Ä (MB)',
            'extension': '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ',
            'modified': '–ò–∑–º–µ–Ω–µ–Ω',
            'tags': 'ü§ñ AI –¢–µ–≥–∏'
        }
        
        for col in headers:
            if col == self.sort_column_name:
                arrow = ' ‚ñº' if self.sort_reverse else ' ‚ñ≤'
                self.tree.heading(col, text=headers[col] + arrow)
            else:
                self.tree.heading(col, text=headers[col] + ' ‚ñ≤‚ñº')
    
    def show_search_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞"""
        if not self.files_data:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            return
        
        search_window = tk.Toplevel(self.root)
        search_window.title("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤")
        search_window.geometry("400x150")
        search_window.transient(self.root)
        search_window.grab_set()
        
        if self.dark_theme:
            search_window.configure(bg='#1e1e1e')
        
        search_window.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() // 2) - (400 // 2)
        y = self.root.winfo_y() + (self.root.winfo_height() // 2) - (150 // 2)
        search_window.geometry(f"400x150+{x}+{y}")
        
        ttk.Label(search_window, text="–ü–æ–∏—Å–∫ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Ç–µ–≥–∞—Ö:", font=('Arial', 12)).pack(pady=10)
        
        search_var = tk.StringVar()
        search_entry = ttk.Entry(search_window, textvariable=search_var, width=40)
        search_entry.pack(pady=5)
        search_entry.focus()
        
        def perform_search():
            query = search_var.get().lower()
            if not query:
                return
            
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            found_count = 0
            for file_info in self.files_data:
                if (query in file_info['name'].lower() or 
                    query in ' '.join(file_info.get('ai_tags', [])).lower()):
                    tags_str = ', '.join(file_info.get('ai_tags', []))
                    self.tree.insert('', 'end', values=(
                        file_info['name'],
                        file_info['full_path'],
                        file_info['size_mb'],
                        file_info['extension'],
                        file_info['modified_date'],
                        tags_str
                    ))
                    found_count += 1
            
            self.stats_var.set(f"–ù–∞–π–¥–µ–Ω–æ: {found_count} —Ñ–∞–π–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
            search_window.destroy()
        
        def reset_search():
            search_window.destroy()
            self.update_results()
        
        buttons_frame = ttk.Frame(search_window)
        buttons_frame.pack(pady=20)
        
        ttk.Button(buttons_frame, text="–ù–∞–π—Ç–∏", command=perform_search).pack(side=tk.LEFT, padx=10)
        ttk.Button(buttons_frame, text="–°–±—Ä–æ—Å–∏—Ç—å", command=reset_search).pack(side=tk.LEFT, padx=10)
        ttk.Button(buttons_frame, text="–û—Ç–º–µ–Ω–∞", command=search_window.destroy).pack(side=tk.LEFT, padx=10)
        
        search_entry.bind('<Return>', lambda e: perform_search())
    
    def show_rule_editor(self, item=None, rules_tree=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª"""
        editor_window = tk.Toplevel(self.root)
        editor_window.title("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–∞–≤–∏–ª AI")
        editor_window.geometry("500x600")
        editor_window.transient(self.root)
        editor_window.grab_set()
        editor_window.resizable(True, True)
        
        if self.dark_theme:
            editor_window.configure(bg='#1e1e1e')
        
        editor_window.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() // 2) - (500 // 2)
        y = self.root.winfo_y() + (self.root.winfo_height() // 2) - (600 // 2)
        editor_window.geometry(f"500x600+{x}+{y}")
        
        is_edit = item is not None
        if is_edit:
            category = rules_tree.item(item)['values'][0].lower()
            rule_data = self.ai_tag_patterns.get(category, {'patterns': [], 'tags': []})
        else:
            category = ""
            rule_data = {'patterns': [], 'tags': []}
        
        title_text = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞" if is_edit else "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞"
        ttk.Label(editor_window, text=title_text, font=('Arial', 14, 'bold')).pack(pady=10)
        
        form_frame = ttk.Frame(editor_window)
        form_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        name_frame = ttk.LabelFrame(form_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", padding="10")
        name_frame.pack(fill=tk.X, pady=5)
        
        category_var = tk.StringVar(value=category)
        category_entry = ttk.Entry(name_frame, textvariable=category_var, font=('Arial', 10))
        category_entry.pack(fill=tk.X)
        
        ttk.Label(name_frame, text="–ù–∞–ø—Ä–∏–º–µ—Ä: my_projects, work_documents", 
                 font=('Arial', 8), foreground='gray').pack(anchor=tk.W, pady=(2, 0))
        
        patterns_frame = ttk.LabelFrame(form_frame, text="–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞", padding="10")
        patterns_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(patterns_frame, text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):").pack(anchor=tk.W)
        
        patterns_text = tk.Text(patterns_frame, height=6, wrap=tk.WORD)
        patterns_text.pack(fill=tk.X, pady=5)
        
        if rule_data['patterns']:
            patterns_text.insert('1.0', '\n'.join(rule_data['patterns']))
        
        ttk.Label(patterns_frame, text="–ü—Ä–∏–º–µ—Ä—ã: report, –æ—Ç—á–µ—Ç, .pdf$, project_*", 
                 font=('Arial', 8), foreground='gray').pack(anchor=tk.W)
        
        tags_frame = ttk.LabelFrame(form_frame, text="–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", padding="10")
        tags_frame.pack(fill=tk.X, pady=5)
        
        tags_var = tk.StringVar(value=', '.join(rule_data['tags']) if rule_data['tags'] else '')
        tags_entry = ttk.Entry(tags_frame, textvariable=tags_var, font=('Arial', 10))
        tags_entry.pack(fill=tk.X)
        
        ttk.Label(tags_frame, text="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–±–æ—Ç–∞, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∞–∂–Ω–æ–µ", 
                 font=('Arial', 8), foreground='gray').pack(anchor=tk.W, pady=(2, 0))
        
        test_frame = ttk.LabelFrame(form_frame, text="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", padding="10")
        test_frame.pack(fill=tk.X, pady=5)
        
        test_input_frame = ttk.Frame(test_frame)
        test_input_frame.pack(fill=tk.X)
        
        ttk.Label(test_input_frame, text="–¢–µ—Å—Ç —Ñ–∞–π–ª:").pack(side=tk.LEFT)
        test_file_var = tk.StringVar(value="report_january.pdf")
        test_file_entry = ttk.Entry(test_input_frame, textvariable=test_file_var, width=20)
        test_file_entry.pack(side=tk.LEFT, padx=10, fill=tk.X, expand=True)
        
        def test_rule():
            patterns = [p.strip() for p in patterns_text.get('1.0', tk.END).strip().split('\n') if p.strip()]
            tags = [t.strip() for t in tags_var.get().split(',') if t.strip()]
            filename = test_file_var.get().lower()
            
            matched = False
            for pattern in patterns:
                if re.search(pattern.lower(), filename):
                    matched = True
                    break
            
            result = f"–§–∞–π–ª: {test_file_var.get()}\n"
            if matched:
                result += f"‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!\n–¢–µ–≥–∏: {', '.join(tags)}"
            else:
                result += "‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            test_result.delete('1.0', tk.END)
            test_result.insert('1.0', result)
        
        ttk.Button(test_input_frame, text="üß™ –¢–µ—Å—Ç", command=test_rule).pack(side=tk.RIGHT)
        
        test_result = tk.Text(test_frame, height=3, wrap=tk.WORD)
        test_result.pack(fill=tk.X, pady=(5, 0))
        
        buttons_frame = ttk.Frame(editor_window)
        buttons_frame.pack(fill=tk.X, padx=20, pady=10)
        
        def save_rule():
            category_name = category_var.get().strip().lower()
            if not category_name:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
                return
            
            patterns = [p.strip() for p in patterns_text.get('1.0', tk.END).strip().split('\n') if p.strip()]
            if not patterns:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ç—Ç–µ—Ä–Ω!")
                return
            
            tags = [t.strip() for t in tags_var.get().split(',') if t.strip()]
            if not tags:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥!")
                return
            
            self.ai_tag_patterns[category_name] = {
                'patterns': patterns,
                'tags': tags
            }
            
            if rules_tree:
                if is_edit:
                    old_category = rules_tree.item(item)['values'][0].lower()
                    if old_category != category_name and old_category in self.ai_tag_patterns:
                        del self.ai_tag_patterns[old_category]
                    rules_tree.delete(item)
                
                patterns_str = ', '.join(patterns[:3]) + ('...' if len(patterns) > 3 else '')
                tags_str = ', '.join(tags)
                rules_tree.insert('', 'end', values=(
                    category_name.title(),
                    patterns_str,
                    tags_str,
                    "‚úÖ"
                ))
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü—Ä–∞–≤–∏–ª–æ '{category_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            self.save_settings()
            editor_window.destroy()
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_rule).pack(side=tk.RIGHT, padx=5)
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=editor_window.destroy).pack(side=tk.RIGHT, padx=5)
        
        if not is_edit:
            category_entry.focus_set()
    
    def show_ai_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI")
        settings_window.geometry("600x500")
        settings_window.transient(self.root)
        settings_window.grab_set()
        settings_window.resizable(True, True)
        
        if self.dark_theme:
            settings_window.configure(bg='#1e1e1e')
        
        settings_window.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() // 2) - (600 // 2)
        y = self.root.winfo_y() + (self.root.winfo_height() // 2) - (500 // 2)
        settings_window.geometry(f"600x500+{x}+{y}")
        
        notebook = ttk.Notebook(settings_window)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        local_frame = ttk.Frame(notebook)
        notebook.add(local_frame, text="ü§ñ –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞")
        
        ttk.Label(local_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö AI –ø—Ä–∞–≤–∏–ª", 
                 font=('Arial', 14, 'bold')).pack(pady=10)
        
        local_settings_frame = ttk.LabelFrame(local_frame, text="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10")
        local_settings_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Checkbutton(local_settings_frame, text="–í–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ AI —Ç–µ–≥–∏", 
                       variable=self.ai_enabled).pack(anchor=tk.W)
        
        rules_frame = ttk.Frame(local_frame)
        rules_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        rules_columns = ('category', 'patterns', 'tags', 'enabled')
        rules_tree = ttk.Treeview(rules_frame, columns=rules_columns, show='headings', height=8)
        
        rules_tree.heading('category', text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
        rules_tree.heading('patterns', text='–ü–∞—Ç—Ç–µ—Ä–Ω—ã')
        rules_tree.heading('tags', text='–¢–µ–≥–∏')
        rules_tree.heading('enabled', text='–ê–∫—Ç–∏–≤–Ω–æ')
        
        rules_tree.column('category', width=100)
        rules_tree.column('patterns', width=200)
        rules_tree.column('tags', width=150)
        rules_tree.column('enabled', width=80)
        
        for category, data in self.ai_tag_patterns.items():
            patterns_str = ', '.join(data['patterns'][:3]) + ('...' if len(data['patterns']) > 3 else '')
            tags_str = ', '.join(data['tags'])
            rules_tree.insert('', 'end', values=(
                category.title(),
                patterns_str,
                tags_str,
                "‚úÖ"
            ))
        
        rules_tree.pack(fill=tk.BOTH, expand=True)
        
        local_buttons_frame = ttk.Frame(local_frame)
        local_buttons_frame.pack(fill=tk.X, padx=10, pady=5)
        
        def add_rule():
            self.show_rule_editor(None, rules_tree)
        
        def edit_rule():
            selected = rules_tree.selection()
            if not selected:
                messagebox.showwarning("–í—ã–±–æ—Ä", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
                return
            self.show_rule_editor(selected[0], rules_tree)
        
        def delete_rule():
            selected = rules_tree.selection()
            if not selected:
                messagebox.showwarning("–í—ã–±–æ—Ä", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
                return
            
            if messagebox.askyesno("–£–¥–∞–ª–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ?"):
                item = selected[0]
                category = rules_tree.item(item)['values'][0].lower()
                if category in self.ai_tag_patterns:
                    del self.ai_tag_patterns[category]
                rules_tree.delete(item)
                self.save_settings()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ!")
        
        ttk.Button(local_buttons_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ", command=add_rule).pack(side=tk.LEFT, padx=5)
        ttk.Button(local_buttons_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=edit_rule).pack(side=tk.LEFT, padx=5)
        ttk.Button(local_buttons_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=delete_rule).pack(side=tk.LEFT, padx=5)
        
        openai_frame = ttk.Frame(notebook)
        notebook.add(openai_frame, text="üß† OpenAI")
        
        ttk.Label(openai_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI GPT", 
                 font=('Arial', 14, 'bold')).pack(pady=20)
        
        openai_main_frame = ttk.LabelFrame(openai_frame, text="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding="15")
        openai_main_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Checkbutton(openai_main_frame, text="–í–∫–ª—é—á–∏—Ç—å OpenAI –∞–Ω–∞–ª–∏–∑", 
                       variable=self.openai_enabled).pack(anchor=tk.W, pady=5)
        
        api_frame = ttk.Frame(openai_main_frame)
        api_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(api_frame, text="üîë API –∫–ª—é—á:").pack(side=tk.LEFT)
        ttk.Entry(api_frame, textvariable=self.openai_api_key, width=40, show="*").pack(side=tk.LEFT, padx=10, fill=tk.X, expand=True)
        
        test_frame = ttk.LabelFrame(openai_frame, text="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", padding="15")
        test_frame.pack(fill=tk.X, padx=10, pady=5)
        
        test_input_frame = ttk.Frame(test_frame)
        test_input_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(test_input_frame, text="üß™ –¢–µ—Å—Ç —Ñ–∞–π–ª:").pack(side=tk.LEFT)
        test_entry = ttk.Entry(test_input_frame, width=30)
        test_entry.pack(side=tk.LEFT, padx=10, fill=tk.X, expand=True)
        test_entry.insert(0, "presentation_Q4_2023.pptx")
        
        def test_ai():
            filename = test_entry.get()
            if not filename:
                return
            
            test_result.delete(1.0, tk.END)
            test_result.insert(tk.END, f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ '{filename}'...\n\n")
            settings_window.update()
            
            if self.openai_api_key.get():
                fake_file_info = {
                    'name': filename,
                    'size_mb': 2.5,
                    'extension': os.path.splitext(filename)[1] or '.unknown'
                }
                
                ai_tags = self.generate_openai_tags(fake_file_info)
                
                if ai_tags:
                    test_result.insert(tk.END, f"‚úÖ OpenAI —Ç–µ–≥–∏: {', '.join(ai_tags)}\n")
                    test_result.insert(tk.END, f"‚ö° –¢–æ–∫–µ–Ω–æ–≤: ~{self.tokens_used_today}\n")
                    cost_today = self.tokens_used_today * 0.0015 / 1000
                    test_result.insert(tk.END, f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~${cost_today:.4f}")
                else:
                    test_result.insert(tk.END, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –æ—Ç OpenAI\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            else:
                test_result.insert(tk.END, "‚ùå –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        ttk.Button(test_input_frame, text="üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", command=test_ai).pack(side=tk.RIGHT, padx=(5, 0))
        
        test_result = tk.Text(test_frame, height=4, wrap=tk.WORD)
        test_result.pack(fill=tk.X, pady=5)
        
        advanced_frame = ttk.Frame(notebook)
        notebook.add(advanced_frame, text="üîß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ")
        
        ttk.Label(advanced_frame, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                 font=('Arial', 14, 'bold')).pack(pady=10)
        
        mode_frame = ttk.LabelFrame(advanced_frame, text="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", padding="15")
        mode_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Radiobutton(mode_frame, text="ü§ñ –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (–±—ã—Å—Ç—Ä–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)", 
                       variable=self.ai_mode, value="local").pack(anchor=tk.W, pady=3)
        ttk.Radiobutton(mode_frame, text="üß† –¢–æ–ª—å–∫–æ OpenAI (–º–µ–¥–ª–µ–Ω–Ω–æ, —Ç–æ—á–Ω–æ)", 
                       variable=self.ai_mode, value="openai").pack(anchor=tk.W, pady=3)
        ttk.Radiobutton(mode_frame, text="‚ö° –ì–∏–±—Ä–∏–¥: –ª–æ–∫–∞–ª—å–Ω—ã–µ + AI –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", 
                       variable=self.ai_mode, value="hybrid").pack(anchor=tk.W, pady=3)
        
        ai_filters_frame = ttk.LabelFrame(advanced_frame, text="–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI", padding="15")
        ai_filters_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Checkbutton(ai_filters_frame, text="–î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", 
                       variable=self.ai_for_unknown).pack(anchor=tk.W, pady=2)
        ttk.Checkbutton(ai_filters_frame, text="–î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (.pdf, .docx, .txt)", 
                       variable=self.ai_for_documents).pack(anchor=tk.W, pady=2)
        ttk.Checkbutton(ai_filters_frame, text="–î–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ø–∞–ø–æ–∫", 
                       variable=self.ai_for_projects).pack(anchor=tk.W, pady=2)
        
        cache_frame = ttk.LabelFrame(advanced_frame, text="–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", padding="15")
        cache_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Checkbutton(cache_frame, text="–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã AI (—ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤)", 
                       variable=self.enable_cache).pack(anchor=tk.W, pady=2)
        
        cache_info = ttk.Label(cache_frame, text="üìÅ –ö—ç—à: 0 —Ñ–∞–π–ª–æ–≤, 0 MB", font=('Arial', 9))
        cache_info.pack(anchor=tk.W, pady=2)
        
        ttk.Button(cache_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à").pack(anchor=tk.W, pady=5)
        
        bottom_frame = ttk.Frame(settings_window)
        bottom_frame.pack(fill=tk.X, padx=10, pady=10)
        
        def save_settings():
            if self.save_settings():
                messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–§–∞–π–ª: ai_settings.json")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫!")
            settings_window.destroy()
        
        ttk.Button(bottom_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_settings).pack(side=tk.RIGHT, padx=5)
        ttk.Button(bottom_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=settings_window.destroy).pack(side=tk.RIGHT, padx=5)
    
    def show_filter_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        if not self.files_data:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            return
        
        filter_window = tk.Toplevel(self.root)
        filter_window.title("üîß –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤")
        filter_window.geometry("400x200")
        filter_window.transient(self.root)
        filter_window.grab_set()
        
        if self.dark_theme:
            filter_window.configure(bg='#1e1e1e')
        
        filter_window.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() // 2) - (400 // 2)
        y = self.root.winfo_y() + (self.root.winfo_height() // 2) - (200 // 2)
        filter_window.geometry(f"400x200+{x}+{y}")
        
        ttk.Label(filter_window, text="–§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞:", font=('Arial', 12)).pack(pady=10)
        
        size_frame = ttk.Frame(filter_window)
        size_frame.pack(pady=5)
        
        ttk.Label(size_frame, text="–†–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ:").pack(side=tk.LEFT)
        size_var = tk.StringVar(value="0")
        size_entry = ttk.Entry(size_frame, textvariable=size_var, width=10)
        size_entry.pack(side=tk.LEFT, padx=5)
        ttk.Label(size_frame, text="MB").pack(side=tk.LEFT)
        
        ttk.Label(filter_window, text="–§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é:", font=('Arial', 12)).pack(pady=(20, 5))
        
        ext_var = tk.StringVar()
        ext_entry = ttk.Entry(filter_window, textvariable=ext_var, width=20)
        ext_entry.pack(pady=5)
        
        def apply_filter():
            try:
                min_size = float(size_var.get())
            except ValueError:
                min_size = 0
            
            ext_filter = ext_var.get().lower().strip()
            
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            found_count = 0
            for file_info in self.files_data:
                if file_info['size_mb'] >= min_size:
                    if not ext_filter or file_info['extension'].lower() == ext_filter:
                        tags_str = ', '.join(file_info.get('ai_tags', []))
                        self.tree.insert('', 'end', values=(
                            file_info['name'],
                            file_info['full_path'],
                            file_info['size_mb'],
                            file_info['extension'],
                            file_info['modified_date'],
                            tags_str
                        ))
                        found_count += 1
            
            filter_desc = f"—Ä–∞–∑–º–µ—Ä ‚â• {min_size}MB"
            if ext_filter:
                filter_desc += f", —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {ext_filter}"
            
            self.stats_var.set(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {found_count} —Ñ–∞–π–ª–æ–≤ ({filter_desc})")
            filter_window.destroy()
        
        def reset_filter():
            filter_window.destroy()
            self.update_results()
        
        buttons_frame = ttk.Frame(filter_window)
        buttons_frame.pack(pady=20)
        
        ttk.Button(buttons_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=apply_filter).pack(side=tk.LEFT, padx=10)
        ttk.Button(buttons_frame, text="–°–±—Ä–æ—Å–∏—Ç—å", command=reset_filter).pack(side=tk.LEFT, padx=10)
        ttk.Button(buttons_frame, text="–û—Ç–º–µ–Ω–∞", command=filter_window.destroy).pack(side=tk.LEFT, padx=10)
    
    def save_file_auto(self, format_type):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º"""
        if not self.files_data:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return
        
        try:
            script_dir = os.path.dirname(os.path.abspath(__file__))
            scanned_folder = self.folder_var.get().strip()
            if scanned_folder:
                folder_name = os.path.basename(scanned_folder)
                if not folder_name:
                    folder_name = scanned_folder.replace(':', '').replace('\\', '').replace('/', '')
            else:
                folder_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
            filename = f"{folder_name} - –ê–Ω–∞–ª–∏–∑ - {timestamp}.{format_type}"
            filename = "".join(c for c in filename if c.isalnum() or c in (' ', '-', '_', '.')).rstrip()
            
            file_path = os.path.join(script_dir, filename)
            
            if format_type == 'txt':
                self.save_to_txt(file_path)
            elif format_type == 'csv':
                self.save_to_csv(file_path)
            elif format_type == 'json':
                self.save_to_json(file_path)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{filename}\n\n–ü—É—Ç—å: {script_dir}")
            
            if messagebox.askyesno("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É?", "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º?"):
                self.open_file_location(file_path)
            
            return file_path
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            return None
    
    def open_file_location(self, file_path):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º"""
        try:
            folder = os.path.dirname(file_path)
            if os.name == 'nt':
                os.startfile(folder)
            elif os.name == 'posix':
                import subprocess
                if hasattr(os, 'uname') and os.uname().sysname == 'Darwin':
                    subprocess.run(['open', folder])
                else:
                    subprocess.run(['xdg-open', folder])
        except Exception as e:
            print(f"Couldn't open folder: {e}")
    
    def create_context_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.context_menu = Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å", command=self.copy_path)
        self.context_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", command=self.open_folder)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞", command=self.show_properties)
        
        self.tree.bind("<Button-3>", self.show_context_menu)
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            self.context_menu.post(event.x_root, event.y_root)
    
    def copy_path(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            path = self.tree.item(item)['values'][1]
            self.root.clipboard_clear()
            self.root.clipboard_append(path)
            messagebox.showinfo("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", f"–ü—É—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:\n{path}")
    
    def open_folder(self):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            path = self.tree.item(item)['values'][1]
            folder = os.path.dirname(path)
            try:
                if os.name == 'nt':
                    os.startfile(folder)
                elif os.name == 'posix':
                    import subprocess
                    if hasattr(os, 'uname') and os.uname().sysname == 'Darwin':
                        subprocess.run(['open', folder])
                    else:
                        subprocess.run(['xdg-open', folder])
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")
    
    def show_properties(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            values = self.tree.item(item)['values']
            name, path, size, ext, modified, tags = values
            
            file_info = None
            for f in self.files_data:
                if f['full_path'] == path:
                    file_info = f
                    break
            
            if file_info:
                tags_str = ', '.join(file_info.get('ai_tags', []))
                props_text = f"""–°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞:

–ò–º—è: {file_info['name']}
–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {file_info['full_path']}
–†–∞–∑–º–µ—Ä: {file_info['size_mb']} MB ({file_info['size_bytes']} –±–∞–π—Ç)
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_info['extension']}
–°–æ–∑–¥–∞–Ω: {file_info['created_date']}
–ò–∑–º–µ–Ω–µ–Ω: {file_info['modified_date']}
–ü–∞–ø–∫–∞: {file_info['directory']}
ü§ñ AI –¢–µ–≥–∏: {tags_str}"""
                
                messagebox.showinfo("–°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞", props_text)
    
    def browse_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        if folder:
            self.folder_var.set(folder)
    
    def start_scan(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        folder = self.folder_var.get().strip()
        if not folder:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        if not os.path.exists(folder):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        if self.scanning:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!")
            return
        
        thread = threading.Thread(target=self.scan_files, args=(folder,))
        thread.daemon = True
        thread.start()
    
    def scan_files(self, directory):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        self.scanning = True
        self.scan_button.config(state='disabled')
        self.progress.config(mode='indeterminate')
        self.progress.start()
        self.progress_var.set("–ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤...")
        
        try:
            self.files_data = []
            
            include_hidden = self.include_hidden.get()
            extensions_text = self.extensions_var.get().strip()
            file_extensions = None
            
            if extensions_text:
                file_extensions = [ext.strip().lower() for ext in extensions_text.split() if ext.strip()]
            
            self.total_files_to_scan = 0
            for root, dirs, files in os.walk(directory):
                if not include_hidden:
                    dirs[:] = [d for d in dirs if not d.startswith('.')]
                
                for file in files:
                    if not include_hidden and file.startswith('.'):
                        continue
                    
                    file_ext = os.path.splitext(file)[1].lower()
                    if file_extensions and file_ext not in file_extensions:
                        continue
                    
                    self.total_files_to_scan += 1
            
            self.progress.stop()
            self.progress.config(mode='determinate', maximum=self.total_files_to_scan)
            self.scan_progress = 0
            
            for root, dirs, files in os.walk(directory):
                if not include_hidden:
                    dirs[:] = [d for d in dirs if not d.startswith('.')]
                
                for file in files:
                    if not include_hidden and file.startswith('.'):
                        continue
                    
                    file_path = os.path.join(root, file)
                    file_ext = os.path.splitext(file)[1].lower()
                    
                    if file_extensions and file_ext not in file_extensions:
                        continue
                    
                    try:
                        stat = os.stat(file_path)
                        file_info = {
                            'name': file,
                            'full_path': file_path,
                            'relative_path': os.path.relpath(file_path, directory),
                            'directory': root,
                            'extension': file_ext or '–Ω–µ—Ç',
                            'size_bytes': stat.st_size,
                            'size_mb': round(stat.st_size / (1024 * 1024), 3),
                            'modified_date': datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S'),
                            'created_date': datetime.fromtimestamp(stat.st_ctime).strftime('%Y-%m-%d %H:%M:%S')
                        }
                        
                        file_info['ai_tags'] = self.combine_ai_tags(file_info)
                        
                        self.files_data.append(file_info)
                        
                        self.scan_progress += 1
                        progress_percent = (self.scan_progress / self.total_files_to_scan) * 100
                        self.root.after(0, self.update_progress, self.scan_progress, progress_percent)
                        
                    except (PermissionError, OSError):
                        continue
            
            self.root.after(0, self.update_results)
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}"))
        finally:
            self.scanning = False
            self.root.after(0, self.scan_complete)
    
    def update_progress(self, current, percent):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress['value'] = current
        self.progress_var.set(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ... {current}/{self.total_files_to_scan} ({percent:.1f}%)")
    
    def scan_complete(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.progress.stop()
        self.progress['value'] = self.total_files_to_scan
        self.scan_button.config(state='normal')
        self.progress_var.set(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(self.files_data)} —Ñ–∞–π–ª–æ–≤")
    
    def update_results(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        for file_info in self.files_data:
            tags_str = ', '.join(file_info.get('ai_tags', []))
            item = self.tree.insert('', 'end', values=(
                file_info['name'],
                file_info['full_path'],
                file_info['size_mb'],
                file_info['extension'],
                file_info['modified_date'],
                tags_str
            ))
            
            if file_info['size_mb'] > 100:
                self.tree.set(item, 'size', f"{file_info['size_mb']} üî¥")
            elif file_info['size_mb'] > 10:
                self.tree.set(item, 'size', f"{file_info['size_mb']} üü°")
            else:
                self.tree.set(item, 'size', f"{file_info['size_mb']} üü¢")
        
        self.update_statistics()
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.files_data:
            self.stats_var.set("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        total_files = len(self.files_data)
        total_size_mb = sum(f['size_mb'] for f in self.files_data)
        total_size_gb = total_size_mb / 1024
        
        extensions = {}
        for file_info in self.files_data:
            ext = file_info['extension']
            extensions[ext] = extensions.get(ext, 0) + 1
        
        top_extensions = sorted(extensions.items(), key=lambda x: x[1], reverse=True)[:5]
        ext_text = ", ".join([f"{ext}: {count}" for ext, count in top_extensions])
        
        if total_size_gb > 1:
            size_text = f"{total_size_gb:.2f} GB"
        else:
            size_text = f"{total_size_mb:.2f} MB"
        
        stats_text = f"üìÅ –§–∞–π–ª–æ–≤: {total_files} | üíæ –†–∞–∑–º–µ—Ä: {size_text} | üèÜ –¢–æ–ø: {ext_text}"
        self.stats_var.set(stats_text)
    
    def save_to_txt(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("üóÇÔ∏è –û–¢–ß–ï–¢ –û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ò –§–ê–ô–õ–û–í\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"üìÖ –î–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {self.folder_var.get()}\n")
            f.write(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.files_data)}\n")
            total_size = sum(f['size_mb'] for f in self.files_data)
            f.write(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.2f} MB ({total_size/1024:.2f} GB)\n\n")
            
            extensions = {}
            for file_info in self.files_data:
                ext = file_info['extension']
                extensions[ext] = extensions.get(ext, 0) + 1
            
            f.write("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ê–°–®–ò–†–ï–ù–ò–Ø–ú:\n")
            f.write("-" * 30 + "\n")
            for ext, count in sorted(extensions.items(), key=lambda x: x[1], reverse=True):
                f.write(f"{ext}: {count} —Ñ–∞–π–ª–æ–≤\n")
            
            f.write("\nüìã –°–ü–ò–°–û–ö –§–ê–ô–õ–û–í:\n")
            f.write("-" * 30 + "\n")
            for file_info in sorted(self.files_data, key=lambda x: x['size_mb'], reverse=True):
                size_indicator = "üî¥" if file_info['size_mb'] > 100 else "üü°" if file_info['size_mb'] > 10 else "üü¢"
                tags_str = ', '.join(file_info.get('ai_tags', []))
                f.write(f"{size_indicator} {file_info['full_path']} ({file_info['size_mb']} MB) [–¢–µ–≥–∏: {tags_str}]\n")
    
    def save_to_csv(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV —Ñ–∞–π–ª"""
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=[
                'name', 'full_path', 'relative_path', 'directory', 
                'extension', 'size_bytes', 'size_mb', 'modified_date', 'created_date', 'ai_tags'
            ])
            writer.writeheader()
            for file_info in self.files_data:
                file_info_copy = file_info.copy()
                file_info_copy['ai_tags'] = ', '.join(file_info.get('ai_tags', []))
                writer.writerow(file_info_copy)
    
    def save_to_json(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª"""
        extensions = {}
        for file_info in self.files_data:
            ext = file_info['extension']
            extensions[ext] = extensions.get(ext, 0) + 1
        
        total_size_mb = sum(f['size_mb'] for f in self.files_data)
        
        data = {
            'scan_info': {
                'version': '1.0',
                'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'scanned_folder': self.folder_var.get(),
                'total_files': len(self.files_data),
                'total_size_mb': round(total_size_mb, 2),
                'total_size_gb': round(total_size_mb / 1024, 2),
                'extensions_stats': extensions,
                'largest_files': sorted(self.files_data, key=lambda x: x['size_mb'], reverse=True)[:10],
                'ai_enabled': self.ai_enabled.get()
            },
            'files': self.files_data
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    
    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        self.files_data = []
        self.stats_var.set("–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
        self.progress_var.set("–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
        self.progress['value'] = 0
        self.scan_progress = 0
        self.total_files_to_scan = 0
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üóÇÔ∏è –§–ê–ô–õ-–°–ö–ê–ù–ï–† v1.0 - –°–ü–†–ê–í–ö–ê

‚ú® AI –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤
‚Ä¢ –£–º–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –≤–æ–∑—Ä–∞—Å—Ç—É —Ñ–∞–π–ª–æ–≤

üéØ –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–æ–∫
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º –∏ —Ä–∞–∑–º–µ—Ä—É
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤ –∏ AI —Ç–µ–≥–∞–º
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT, CSV –∏ JSON —Å —Ç–µ–≥–∞–º–∏

üîß –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è  
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ AI —Ç–µ–≥–∏ –≤ F2
3. –ù–∞–∂–º–∏—Ç–µ "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å" (F5)
4. –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø–æ –∏–º–µ–Ω–∞–º, –∏ –ø–æ —Ç–µ–≥–∞–º
5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç —Å AI –¥–∞–Ω–Ω—ã–º–∏

ü§ñ AI –¢–ï–ì–ò:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ä–∞–±–æ—Ç–∞, –∫–æ–¥, –º–µ–¥–∏–∞, –∏–≥—Ä—ã, –∞—Ä—Ö–∏–≤—ã
‚Ä¢ –†–∞–∑–º–µ—Ä: –±–æ–ª—å—à–æ–π/—Å—Ä–µ–¥–Ω–∏–π/–º–∞–ª–µ–Ω—å–∫–∏–π  
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: –Ω–æ–≤—ã–π/–Ω–µ–¥–∞–≤–Ω–∏–π/—Å—Ç–∞—Ä—ã–π
‚Ä¢ –ü–æ–∏—Å–∫: "—Ä–∞–±–æ—Ç–∞" –Ω–∞–π–¥–µ—Ç –≤—Å–µ —Ä–∞–±–æ—á–∏–µ —Ñ–∞–π–ª—ã

üé® –¶–í–ï–¢–û–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:
üî¥ –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (>100 MB)
üü° –°—Ä–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã (10-100 MB)  
üü¢ –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã (<10 MB)

‚å®Ô∏è –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò:
F5 - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
F3 - –ü–æ–∏—Å–∫ (–ø–æ –∏–º–µ–Ω–∞–º –∏ —Ç–µ–≥–∞–º)
F2 - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI
F1 - –°–ø—Ä–∞–≤–∫–∞
Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON
Ctrl+T - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å TXT
Ctrl+E - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV
Ctrl+Q - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É
Ctrl+F - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
Del - –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï:
‚Ä¢ JSON, TXT –∏ CSV —Å–æ–¥–µ—Ä–∂–∞—Ç AI —Ç–µ–≥–∏
‚Ä¢ –§–æ—Ä–º–∞—Ç: "–ü–∞–ø–∫–∞ - –ê–Ω–∞–ª–∏–∑ - –¥–∞—Ç–∞.—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"

üé® –¢–ï–ú–´:
‚Ä¢ –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ (–∫–Ω–æ–ø–∫–∞ üåô –∏–ª–∏ Ctrl+Q)

–ê–í–¢–û–†: File Scanner v1.0 with AI
"""
        
        messagebox.showinfo("–°–ø—Ä–∞–≤–∫–∞", help_text)

def main():
    root = tk.Tk()
    app = FileScannerGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
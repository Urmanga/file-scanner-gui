import tkinter as tk
from tkinter import ttk, filedialog, messagebox, Menu
import os
import json
import csv
from pathlib import Path
from datetime import datetime
import threading
import webbrowser

class FileScannerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤ v2.1")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)
        
        # –î–∞–Ω–Ω—ã–µ
        self.files_data = []
        self.scanning = False
        self.scan_progress = 0
        self.total_files_to_scan = 0
        
        # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        self.dark_theme = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        self.setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.setup_hotkeys()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.style = ttk.Style()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ–º—É
        available_themes = self.style.theme_names()
        if 'clam' in available_themes:
            self.style.theme_use('clam')
        elif 'alt' in available_themes:
            self.style.theme_use('alt')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
        self.apply_theme()
    
    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º—É"""
        if self.dark_theme:
            # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
            self.root.configure(bg='#2b2b2b')
            self.style.theme_use('clam')
            self.style.configure('TLabel', background='#2b2b2b', foreground='white')
            self.style.configure('TFrame', background='#2b2b2b')
            self.style.configure('TLabelFrame', background='#2b2b2b', foreground='white')
            self.style.configure('TButton', background='#404040', foreground='white')
            self.style.configure('TEntry', background='#404040', foreground='white')
            self.style.configure('TCheckbutton', background='#2b2b2b', foreground='white')
            self.style.configure('Treeview', background='#404040', foreground='white', fieldbackground='#404040')
            self.style.configure('Treeview.Heading', background='#505050', foreground='white')
        else:
            # –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
            self.root.configure(bg='SystemButtonFace')
            self.style.theme_use('clam')
            self.style.configure('TLabel', background='SystemButtonFace', foreground='black')
            self.style.configure('TFrame', background='SystemButtonFace')
            self.style.configure('TLabelFrame', background='SystemButtonFace', foreground='black')
            self.style.configure('TButton', background='SystemButtonFace', foreground='black')
            self.style.configure('TEntry', background='white', foreground='black')
            self.style.configure('TCheckbutton', background='SystemButtonFace', foreground='black')
            self.style.configure('Treeview', background='white', foreground='black', fieldbackground='white')
            self.style.configure('Treeview.Heading', background='SystemButtonFace', foreground='black')
    
    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"""
        self.dark_theme = not self.dark_theme
        self.apply_theme()
    
    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        self.root.bind('<F5>', lambda e: self.start_scan())
        self.root.bind('<Control-s>', lambda e: self.save_results())
        self.root.bind('<Delete>', lambda e: self.clear_results())
        self.root.bind('<F3>', lambda e: self.show_search_dialog())
        self.root.bind('<Control-f>', lambda e: self.show_filter_dialog())
        self.root.bind('<Control-q>', lambda e: self.quick_save())
        self.root.bind('<F1>', lambda e: self.show_help())
        self.root.bind('<Control-t>', lambda e: self.toggle_theme())
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (900 // 2)
        y = (self.root.winfo_screenheight() // 2) - (700 // 2)
        self.root.geometry(f"900x700+{x}+{y}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(5, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —Ç–µ–º—ã
        header_frame = ttk.Frame(main_frame)
        header_frame.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        title_label = ttk.Label(header_frame, text="üóÇÔ∏è –°–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤ v2.1", font=('Arial', 16, 'bold'))
        title_label.pack(side=tk.LEFT)
        
        theme_button = ttk.Button(header_frame, text="üåô", command=self.toggle_theme, width=3)
        theme_button.pack(side=tk.RIGHT, padx=(20, 0))
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        folder_frame = ttk.LabelFrame(main_frame, text="–í—ã–±–æ—Ä –ø–∞–ø–∫–∏", padding="10")
        folder_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        folder_frame.columnconfigure(1, weight=1)
        
        ttk.Label(folder_frame, text="–ü–∞–ø–∫–∞:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        
        self.folder_var = tk.StringVar()
        self.folder_entry = ttk.Entry(folder_frame, textvariable=self.folder_var, font=('Arial', 10))
        self.folder_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        
        ttk.Button(folder_frame, text="–û–±–∑–æ—Ä...", command=self.browse_folder).grid(row=0, column=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", padding="10")
        settings_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ß–µ–∫–±–æ–∫—Å—ã
        options_frame = ttk.Frame(settings_frame)
        options_frame.grid(row=0, column=0, columnspan=2, sticky=tk.W)
        
        self.include_hidden = tk.BooleanVar()
        ttk.Checkbutton(options_frame, text="–í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã", 
                       variable=self.include_hidden).grid(row=0, column=0, sticky=tk.W, padx=(0, 20))
        
        self.show_details = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", 
                       variable=self.show_details).grid(row=0, column=1, sticky=tk.W)
        
        # –§–∏–ª—å—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        ttk.Label(settings_frame, text="–§–∏–ª—å—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:").grid(row=1, column=0, sticky=tk.W, pady=(10, 0))
        
        self.extensions_var = tk.StringVar()
        extensions_entry = ttk.Entry(settings_frame, textvariable=self.extensions_var, width=40)
        extensions_entry.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=(10, 0))
        
        ttk.Label(settings_frame, text="(–Ω–∞–ø—Ä–∏–º–µ—Ä: .txt .py .jpg)", font=('Arial', 8)).grid(
            row=2, column=1, sticky=tk.W, padx=(10, 0), pady=(2, 0))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.grid(row=3, column=0, columnspan=3, pady=(0, 10))
        
        self.scan_button = ttk.Button(buttons_frame, text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å (F5)", 
                                     command=self.start_scan)
        self.scan_button.grid(row=0, column=0, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (Ctrl+S)", 
                  command=self.save_results).grid(row=0, column=1, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="‚ö° JSON (Ctrl+Q)", 
                  command=self.quick_save).grid(row=0, column=2, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üîç –ü–æ–∏—Å–∫ (F3)", 
                  command=self.show_search_dialog).grid(row=0, column=3, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", 
                  command=self.clear_results).grid(row=0, column=4, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="‚ùì –°–ø—Ä–∞–≤–∫–∞ (F1)", 
                  command=self.show_help).grid(row=0, column=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        progress_frame = ttk.Frame(main_frame)
        progress_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        progress_frame.columnconfigure(0, weight=1)
        
        self.progress = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
        progress_label = ttk.Label(progress_frame, textvariable=self.progress_var)
        progress_label.grid(row=1, column=0)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_frame = ttk.LabelFrame(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", padding="5")
        results_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        results_frame.columnconfigure(0, weight=1)
        results_frame.rowconfigure(1, weight=1)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_var = tk.StringVar(value="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        stats_label = ttk.Label(results_frame, textvariable=self.stats_var, font=('Arial', 10, 'bold'))
        stats_label.grid(row=0, column=0, sticky=tk.W, pady=(0, 5))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        columns = ('name', 'path', 'size', 'extension', 'modified')
        self.tree = ttk.Treeview(results_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        self.tree.heading('name', text='–ò–º—è —Ñ–∞–π–ª–∞ ‚ñ≤‚ñº', command=lambda: self.sort_column('name'))
        self.tree.heading('path', text='–ü—É—Ç—å ‚ñ≤‚ñº', command=lambda: self.sort_column('path'))
        self.tree.heading('size', text='–†–∞–∑–º–µ—Ä (MB) ‚ñ≤‚ñº', command=lambda: self.sort_column('size'))
        self.tree.heading('extension', text='–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ‚ñ≤‚ñº', command=lambda: self.sort_column('extension'))
        self.tree.heading('modified', text='–ò–∑–º–µ–Ω–µ–Ω ‚ñ≤‚ñº', command=lambda: self.sort_column('modified'))
        
        self.tree.column('name', width=200)
        self.tree.column('path', width=300)
        self.tree.column('size', width=100)
        self.tree.column('extension', width=100)
        self.tree.column('modified', width=150)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.sort_column_name = None
        self.sort_reverse = False
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(results_frame, orient=tk.HORIZONTAL, command=self.tree.xview)
        self.tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–≤
        self.tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        v_scrollbar.grid(row=1, column=1, sticky=(tk.N, tk.S))
        h_scrollbar.grid(row=2, column=0, sticky=(tk.W, tk.E))
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.create_context_menu()
    
    def sort_column(self, column):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–∫–∏"""
        if self.sort_column_name == column:
            self.sort_reverse = not self.sort_reverse
        else:
            self.sort_reverse = False
            self.sort_column_name = column
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        data = []
        for child in self.tree.get_children():
            values = self.tree.item(child)['values']
            data.append((child, values))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if column == 'name':
            data.sort(key=lambda x: x[1][0].lower(), reverse=self.sort_reverse)
        elif column == 'path':
            data.sort(key=lambda x: x[1][1].lower(), reverse=self.sort_reverse)
        elif column == 'size':
            data.sort(key=lambda x: float(x[1][2]) if x[1][2] else 0, reverse=self.sort_reverse)
        elif column == 'extension':
            data.sort(key=lambda x: x[1][3].lower(), reverse=self.sort_reverse)
        elif column == 'modified':
            data.sort(key=lambda x: x[1][4], reverse=self.sort_reverse)
        
        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        for index, (child, values) in enumerate(data):
            self.tree.move(child, '', index)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.update_column_headers()
    
    def update_column_headers(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        headers = {
            'name': '–ò–º—è —Ñ–∞–π–ª–∞',
            'path': '–ü—É—Ç—å', 
            'size': '–†–∞–∑–º–µ—Ä (MB)',
            'extension': '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ',
            'modified': '–ò–∑–º–µ–Ω–µ–Ω'
        }
        
        for col in headers:
            if col == self.sort_column_name:
                arrow = ' ‚ñº' if self.sort_reverse else ' ‚ñ≤'
                self.tree.heading(col, text=headers[col] + arrow)
            else:
                self.tree.heading(col, text=headers[col] + ' ‚ñ≤‚ñº')
    
    def show_search_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞"""
        if not self.files_data:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            return
        
        search_window = tk.Toplevel(self.root)
        search_window.title("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤")
        search_window.geometry("400x150")
        search_window.transient(self.root)
        search_window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        search_window.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() // 2) - (400 // 2)
        y = self.root.winfo_y() + (self.root.winfo_height() // 2) - (150 // 2)
        search_window.geometry(f"400x150+{x}+{y}")
        
        ttk.Label(search_window, text="–ü–æ–∏—Å–∫ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤:", font=('Arial', 12)).pack(pady=10)
        
        search_var = tk.StringVar()
        search_entry = ttk.Entry(search_window, textvariable=search_var, width=40)
        search_entry.pack(pady=5)
        search_entry.focus()
        
        def perform_search():
            query = search_var.get().lower()
            if not query:
                return
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            found_count = 0
            for file_info in self.files_data:
                if query in file_info['name'].lower():
                    self.tree.insert('', 'end', values=(
                        file_info['name'],
                        file_info['full_path'],
                        file_info['size_mb'],
                        file_info['extension'],
                        file_info['modified_date']
                    ))
                    found_count += 1
            
            self.stats_var.set(f"–ù–∞–π–¥–µ–Ω–æ: {found_count} —Ñ–∞–π–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
            search_window.destroy()
        
        def reset_search():
            search_window.destroy()
            self.update_results()
        
        buttons_frame = ttk.Frame(search_window)
        buttons_frame.pack(pady=20)
        
        ttk.Button(buttons_frame, text="–ù–∞–π—Ç–∏", command=perform_search).pack(side=tk.LEFT, padx=10)
        ttk.Button(buttons_frame, text="–°–±—Ä–æ—Å–∏—Ç—å", command=reset_search).pack(side=tk.LEFT, padx=10)
        ttk.Button(buttons_frame, text="–û—Ç–º–µ–Ω–∞", command=search_window.destroy).pack(side=tk.LEFT, padx=10)
        
        # Enter –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_entry.bind('<Return>', lambda e: perform_search())
    
    def show_filter_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        if not self.files_data:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            return
        
        filter_window = tk.Toplevel(self.root)
        filter_window.title("üîß –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤")
        filter_window.geometry("400x200")
        filter_window.transient(self.root)
        filter_window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        filter_window.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() // 2) - (400 // 2)
        y = self.root.winfo_y() + (self.root.winfo_height() // 2) - (200 // 2)
        filter_window.geometry(f"400x200+{x}+{y}")
        
        ttk.Label(filter_window, text="–§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞:", font=('Arial', 12)).pack(pady=10)
        
        size_frame = ttk.Frame(filter_window)
        size_frame.pack(pady=5)
        
        ttk.Label(size_frame, text="–†–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ:").pack(side=tk.LEFT)
        size_var = tk.StringVar(value="0")
        size_entry = ttk.Entry(size_frame, textvariable=size_var, width=10)
        size_entry.pack(side=tk.LEFT, padx=5)
        ttk.Label(size_frame, text="MB").pack(side=tk.LEFT)
        
        ttk.Label(filter_window, text="–§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é:", font=('Arial', 12)).pack(pady=(20, 5))
        
        ext_var = tk.StringVar()
        ext_entry = ttk.Entry(filter_window, textvariable=ext_var, width=20)
        ext_entry.pack(pady=5)
        
        def apply_filter():
            try:
                min_size = float(size_var.get())
            except ValueError:
                min_size = 0
            
            ext_filter = ext_var.get().lower().strip()
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            found_count = 0
            for file_info in self.files_data:
                if file_info['size_mb'] >= min_size:
                    if not ext_filter or file_info['extension'].lower() == ext_filter:
                        self.tree.insert('', 'end', values=(
                            file_info['name'],
                            file_info['full_path'],
                            file_info['size_mb'],
                            file_info['extension'],
                            file_info['modified_date']
                        ))
                        found_count += 1
            
            filter_desc = f"—Ä–∞–∑–º–µ—Ä ‚â• {min_size}MB"
            if ext_filter:
                filter_desc += f", —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {ext_filter}"
            
            self.stats_var.set(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {found_count} —Ñ–∞–π–ª–æ–≤ ({filter_desc})")
            filter_window.destroy()
        
        def reset_filter():
            filter_window.destroy()
            self.update_results()
        
        buttons_frame = ttk.Frame(filter_window)
        buttons_frame.pack(pady=20)
        
        ttk.Button(buttons_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=apply_filter).pack(side=tk.LEFT, padx=10)
        ttk.Button(buttons_frame, text="–°–±—Ä–æ—Å–∏—Ç—å", command=reset_filter).pack(side=tk.LEFT, padx=10)
        ttk.Button(buttons_frame, text="–û—Ç–º–µ–Ω–∞", command=filter_window.destroy).pack(side=tk.LEFT, padx=10)
    
    def quick_save(self, format_type='json'):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª"""
        if not self.files_data:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return
        
        try:
            desktop = os.path.join(os.path.expanduser("~"), "Desktop")
            if not os.path.exists(desktop):
                # –ï—Å–ª–∏ Desktop –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–æ–º–∞—à–Ω—é—é –ø–∞–ø–∫—É
                desktop = os.path.expanduser("~")
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"files_scan_{timestamp}.{format_type}"
            file_path = os.path.join(desktop, filename)
            
            if format_type == 'txt':
                self.save_to_txt(file_path)
            elif format_type == 'csv':
                self.save_to_csv(file_path)
            elif format_type == 'json':
                self.save_to_json(file_path)
            
            messagebox.showinfo("–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{filename}\n\n–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {desktop}")
            return file_path
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            return None
    
    def create_context_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.context_menu = Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å", command=self.copy_path)
        self.context_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", command=self.open_folder)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞", command=self.show_properties)
        
        self.tree.bind("<Button-3>", self.show_context_menu)  # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            self.context_menu.post(event.x_root, event.y_root)
    
    def copy_path(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            path = self.tree.item(item)['values'][1]  # –ø—É—Ç—å - –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç
            self.root.clipboard_clear()
            self.root.clipboard_append(path)
            messagebox.showinfo("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", f"–ü—É—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:\n{path}")
    
    def open_folder(self):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            path = self.tree.item(item)['values'][1]
            folder = os.path.dirname(path)
            try:
                if os.name == 'nt':  # Windows
                    os.startfile(folder)
                elif os.name == 'posix':  # macOS and Linux
                    import subprocess
                    if hasattr(os, 'uname') and os.uname().sysname == 'Darwin':  # macOS
                        subprocess.run(['open', folder])
                    else:  # Linux
                        subprocess.run(['xdg-open', folder])
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")
    
    def show_properties(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            values = self.tree.item(item)['values']
            name, path, size, ext, modified = values
            
            # –ù–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = None
            for f in self.files_data:
                if f['full_path'] == path:
                    file_info = f
                    break
            
            if file_info:
                props_text = f"""–°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞:

–ò–º—è: {file_info['name']}
–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {file_info['full_path']}
–†–∞–∑–º–µ—Ä: {file_info['size_mb']} MB ({file_info['size_bytes']} –±–∞–π—Ç)
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_info['extension']}
–°–æ–∑–¥–∞–Ω: {file_info['created_date']}
–ò–∑–º–µ–Ω–µ–Ω: {file_info['modified_date']}
–ü–∞–ø–∫–∞: {file_info['directory']}"""
                
                messagebox.showinfo("–°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞", props_text)
    
    def browse_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        if folder:
            self.folder_var.set(folder)
    
    def start_scan(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        folder = self.folder_var.get().strip()
        if not folder:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        if not os.path.exists(folder):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        if self.scanning:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!")
            return
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.scan_files, args=(folder,))
        thread.daemon = True
        thread.start()
    
    def scan_files(self, directory):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        self.scanning = True
        self.scan_button.config(state='disabled')
        self.progress.config(mode='indeterminate')
        self.progress.start()
        self.progress_var.set("–ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤...")
        
        try:
            self.files_data = []
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            include_hidden = self.include_hidden.get()
            extensions_text = self.extensions_var.get().strip()
            file_extensions = None
            
            if extensions_text:
                file_extensions = [ext.strip().lower() for ext in extensions_text.split() if ext.strip()]
            
            # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ - –ø–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.total_files_to_scan = 0
            for root, dirs, files in os.walk(directory):
                if not include_hidden:
                    dirs[:] = [d for d in dirs if not d.startswith('.')]
                
                for file in files:
                    if not include_hidden and file.startswith('.'):
                        continue
                    
                    file_ext = os.path.splitext(file)[1].lower()
                    if file_extensions and file_ext not in file_extensions:
                        continue
                    
                    self.total_files_to_scan += 1
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.progress.stop()
            self.progress.config(mode='determinate', maximum=self.total_files_to_scan)
            self.scan_progress = 0
            
            # –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥ - —Å–∞–º–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            for root, dirs, files in os.walk(directory):
                # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not include_hidden:
                    dirs[:] = [d for d in dirs if not d.startswith('.')]
                
                for file in files:
                    if not include_hidden and file.startswith('.'):
                        continue
                    
                    file_path = os.path.join(root, file)
                    file_ext = os.path.splitext(file)[1].lower()
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
                    if file_extensions and file_ext not in file_extensions:
                        continue
                    
                    try:
                        stat = os.stat(file_path)
                        file_info = {
                            'name': file,
                            'full_path': file_path,
                            'relative_path': os.path.relpath(file_path, directory),
                            'directory': root,
                            'extension': file_ext or '–Ω–µ—Ç',
                            'size_bytes': stat.st_size,
                            'size_mb': round(stat.st_size / (1024 * 1024), 3),
                            'modified_date': datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S'),
                            'created_date': datetime.fromtimestamp(stat.st_ctime).strftime('%Y-%m-%d %H:%M:%S')
                        }
                        self.files_data.append(file_info)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        self.scan_progress += 1
                        progress_percent = (self.scan_progress / self.total_files_to_scan) * 100
                        self.root.after(0, self.update_progress, self.scan_progress, progress_percent)
                        
                    except (PermissionError, OSError):
                        continue
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self.update_results)
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}"))
        finally:
            self.scanning = False
            self.root.after(0, self.scan_complete)
    
    def update_progress(self, current, percent):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress['value'] = current
        self.progress_var.set(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ... {current}/{self.total_files_to_scan} ({percent:.1f}%)")
    
    def scan_complete(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.progress.stop()
        self.progress['value'] = self.total_files_to_scan
        self.scan_button.config(state='normal')
        self.progress_var.set(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(self.files_data)} —Ñ–∞–π–ª–æ–≤")
    
    def update_results(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        for file_info in self.files_data:
            item = self.tree.insert('', 'end', values=(
                file_info['name'],
                file_info['full_path'],
                file_info['size_mb'],
                file_info['extension'],
                file_info['modified_date']
            ))
            
            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
            if file_info['size_mb'] > 100:  # –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã - –∫—Ä–∞—Å–Ω—ã–π
                self.tree.set(item, 'size', f"{file_info['size_mb']} üî¥")
            elif file_info['size_mb'] > 10:  # –°—Ä–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã - –∂–µ–ª—Ç—ã–π
                self.tree.set(item, 'size', f"{file_info['size_mb']} üü°")
            else:  # –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã - –∑–µ–ª–µ–Ω—ã–π
                self.tree.set(item, 'size', f"{file_info['size_mb']} üü¢")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.update_statistics()
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.files_data:
            self.stats_var.set("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        total_files = len(self.files_data)
        total_size_mb = sum(f['size_mb'] for f in self.files_data)
        total_size_gb = total_size_mb / 1024
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
        extensions = {}
        for file_info in self.files_data:
            ext = file_info['extension']
            extensions[ext] = extensions.get(ext, 0) + 1
        
        # –¢–æ–ø-5 —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        top_extensions = sorted(extensions.items(), key=lambda x: x[1], reverse=True)[:5]
        ext_text = ", ".join([f"{ext}: {count}" for ext, count in top_extensions])
        
        if total_size_gb > 1:
            size_text = f"{total_size_gb:.2f} GB"
        else:
            size_text = f"{total_size_mb:.2f} MB"
        
        stats_text = f"üìÅ –§–∞–π–ª–æ–≤: {total_files} | üíæ –†–∞–∑–º–µ—Ä: {size_text} | üèÜ –¢–æ–ø: {ext_text}"
        self.stats_var.set(stats_text)
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.files_data:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return
        
        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        save_window = tk.Toplevel(self.root)
        save_window.title("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        save_window.geometry("350x250")
        save_window.transient(self.root)
        save_window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        save_window.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() // 2) - (350 // 2)
        y = self.root.winfo_y() + (self.root.winfo_height() // 2) - (250 // 2)
        save_window.geometry(f"350x250+{x}+{y}")
        
        ttk.Label(save_window, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:", font=('Arial', 12)).pack(pady=20)
        
        format_var = tk.StringVar(value="json")
        
        ttk.Radiobutton(save_window, text="üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)", 
                       variable=format_var, value="txt").pack(anchor=tk.W, padx=50, pady=5)
        ttk.Radiobutton(save_window, text="üìä CSV —Ñ–∞–π–ª (.csv)", 
                       variable=format_var, value="csv").pack(anchor=tk.W, padx=50, pady=5)
        ttk.Radiobutton(save_window, text="üóÇÔ∏è JSON —Ñ–∞–π–ª (.json)", 
                       variable=format_var, value="json").pack(anchor=tk.W, padx=50, pady=5)
        
        buttons_frame = ttk.Frame(save_window)
        buttons_frame.pack(pady=20)
        
        def do_save():
            format_type = format_var.get()
            save_window.destroy()
            self.save_file(format_type)
        
        def do_quick_save():
            format_type = format_var.get()
            save_window.destroy()
            self.quick_save(format_type)
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...", command=do_save).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="‚ö° –ë—ã—Å—Ç—Ä–æ", command=do_quick_save).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=save_window.destroy).pack(side=tk.LEFT, padx=5)
    
    def save_file(self, format_type):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if not self.files_data:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return
            
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"files_scan_{timestamp}.{format_type}"
        
        try:
            # –ü–æ–¥–Ω–∏–º–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
            self.root.lift()
            self.root.focus_force()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
            if format_type == 'txt':
                filetypes = [("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            elif format_type == 'csv':
                filetypes = [("CSV —Ñ–∞–π–ª—ã", "*.csv"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            elif format_type == 'json':
                filetypes = [("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            else:
                filetypes = [("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            
            file_path = filedialog.asksaveasfilename(
                title=f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ {format_type.upper()}",
                defaultextension=f".{format_type}",
                filetypes=filetypes,
                initialname=filename
            )
            
            if not file_path:
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            if format_type == 'txt':
                self.save_to_txt(file_path)
            elif format_type == 'csv':
                self.save_to_csv(file_path)
            elif format_type == 'json':
                self.save_to_json(file_path)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{file_path}")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º
            if messagebox.askyesno("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É?", "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º?"):
                self.open_file_location(file_path)
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    
    def open_file_location(self, file_path):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º"""
        try:
            folder = os.path.dirname(file_path)
            if os.name == 'nt':  # Windows
                os.startfile(folder)
            elif os.name == 'posix':  # macOS and Linux
                import subprocess
                if hasattr(os, 'uname') and os.uname().sysname == 'Darwin':  # macOS
                    subprocess.run(['open', folder])
                else:  # Linux
                    subprocess.run(['xdg-open', folder])
        except Exception as e:
            print(f"Couldn't open folder: {e}")
    
    def save_to_txt(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("üóÇÔ∏è –û–¢–ß–ï–¢ –û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ò –§–ê–ô–õ–û–í\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"üìÖ –î–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {self.folder_var.get()}\n")
            f.write(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.files_data)}\n")
            total_size = sum(f['size_mb'] for f in self.files_data)
            f.write(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.2f} MB ({total_size/1024:.2f} GB)\n\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
            extensions = {}
            for file_info in self.files_data:
                ext = file_info['extension']
                extensions[ext] = extensions.get(ext, 0) + 1
            
            f.write("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ê–°–®–ò–†–ï–ù–ò–Ø–ú:\n")
            f.write("-" * 30 + "\n")
            for ext, count in sorted(extensions.items(), key=lambda x: x[1], reverse=True):
                f.write(f"{ext}: {count} —Ñ–∞–π–ª–æ–≤\n")
            
            f.write("\nüìã –°–ü–ò–°–û–ö –§–ê–ô–õ–û–í:\n")
            f.write("-" * 30 + "\n")
            for file_info in sorted(self.files_data, key=lambda x: x['size_mb'], reverse=True):
                size_indicator = "üî¥" if file_info['size_mb'] > 100 else "üü°" if file_info['size_mb'] > 10 else "üü¢"
                f.write(f"{size_indicator} {file_info['full_path']} ({file_info['size_mb']} MB)\n")
    
    def save_to_csv(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV —Ñ–∞–π–ª"""
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=[
                'name', 'full_path', 'relative_path', 'directory', 
                'extension', 'size_bytes', 'size_mb', 'modified_date', 'created_date'
            ])
            writer.writeheader()
            writer.writerows(self.files_data)
    
    def save_to_json(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª"""
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        extensions = {}
        for file_info in self.files_data:
            ext = file_info['extension']
            extensions[ext] = extensions.get(ext, 0) + 1
        
        total_size_mb = sum(f['size_mb'] for f in self.files_data)
        
        data = {
            'scan_info': {
                'version': '2.1',
                'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'scanned_folder': self.folder_var.get(),
                'total_files': len(self.files_data),
                'total_size_mb': round(total_size_mb, 2),
                'total_size_gb': round(total_size_mb / 1024, 2),
                'extensions_stats': extensions,
                'largest_files': sorted(self.files_data, key=lambda x: x['size_mb'], reverse=True)[:10]
            },
            'files': self.files_data
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    
    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.files_data = []
        
        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.stats_var.set("–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
        self.progress_var.set("–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
        self.progress['value'] = 0
        self.scan_progress = 0
        self.total_files_to_scan = 0
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üóÇÔ∏è –°–ö–ê–ù–ï–† –§–ê–ô–õ–û–í v2.1 - –°–ü–†–ê–í–ö–ê

‚ú® –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ (–∫–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É)
‚Ä¢ –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
‚Ä¢ –¢–µ–º–Ω–∞—è/—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ (üåô –∏–ª–∏ Ctrl+T)
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª

üéØ –û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–æ–∫
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º –∏ —Ä–∞–∑–º–µ—Ä—É
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT, CSV, JSON

üîß –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–ø—Ü–∏–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
3. –ù–∞–∂–º–∏—Ç–µ "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å" (F5)
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ (F3) –∏ —Ñ–∏–ª—å—Ç—Ä—ã (Ctrl+F)
5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç (Ctrl+S –∏–ª–∏ Ctrl+Q)

üé® –¶–í–ï–¢–û–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:
üî¥ –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (>100 MB)
üü° –°—Ä–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã (10-100 MB)  
üü¢ –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã (<10 MB)

‚å®Ô∏è –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò:
F5 - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
F3 - –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
F1 - –°–ø—Ä–∞–≤–∫–∞
Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...
Ctrl+Q - –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
Ctrl+F - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
Ctrl+T - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É
Del - –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

üëÜ –ö–û–ù–¢–ï–ö–°–¢–ù–û–ï –ú–ï–ù–Æ:
–ü–ö–ú –ø–æ —Ñ–∞–π–ª—É ‚Üí –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å, –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É, –°–≤–æ–π—Å—Ç–≤–∞

üìÅ –§–ò–õ–¨–¢–†–´:
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è: .txt .py .jpg .doc
‚Ä¢ –†–∞–∑–º–µ—Ä: —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ X MB
‚Ä¢ –ü–æ–∏—Å–∫: –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (Ctrl+S): –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ TXT/CSV/JSON
‚Ä¢ –ë—ã—Å—Ç—Ä–æ JSON (Ctrl+Q): –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
‚Ä¢ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
‚Ä¢ –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ - –ê–Ω–∞–ª–∏–∑ - –¥–∞—Ç–∞-–≤—Ä–µ–º—è.—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"

üé® –¢–ï–ú–´:
‚Ä¢ –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ (–∫–Ω–æ–ø–∫–∞ üåô)

–ê–í–¢–û–†: File Scanner v2.1 Enhanced
"""
        
        messagebox.showinfo("–°–ø—Ä–∞–≤–∫–∞", help_text)

def main():
    root = tk.Tk()
    app = FileScannerGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
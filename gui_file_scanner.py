import tkinter as tk
from tkinter import ttk, filedialog, messagebox, Menu
import os
import json
import csv
from pathlib import Path
from datetime import datetime
import threading
import webbrowser

class FileScannerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤ v2.0")
        self.root.geometry("900x700")
        self.root.minsize(800, 600)
        
        # –î–∞–Ω–Ω—ã–µ
        self.files_data = []
        self.scanning = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        self.setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ–º—É
        available_themes = style.theme_names()
        if 'clam' in available_themes:
            style.theme_use('clam')
        elif 'alt' in available_themes:
            style.theme_use('alt')
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (900 // 2)
        y = (self.root.winfo_screenheight() // 2) - (700 // 2)
        self.root.geometry(f"900x700+{x}+{y}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(4, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üóÇÔ∏è –°–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤", font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        folder_frame = ttk.LabelFrame(main_frame, text="–í—ã–±–æ—Ä –ø–∞–ø–∫–∏", padding="10")
        folder_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        folder_frame.columnconfigure(1, weight=1)
        
        ttk.Label(folder_frame, text="–ü–∞–ø–∫–∞:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        
        self.folder_var = tk.StringVar()
        self.folder_entry = ttk.Entry(folder_frame, textvariable=self.folder_var, font=('Arial', 10))
        self.folder_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        
        ttk.Button(folder_frame, text="–û–±–∑–æ—Ä...", command=self.browse_folder).grid(row=0, column=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", padding="10")
        settings_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –ß–µ–∫–±–æ–∫—Å—ã
        options_frame = ttk.Frame(settings_frame)
        options_frame.grid(row=0, column=0, columnspan=2, sticky=tk.W)
        
        self.include_hidden = tk.BooleanVar()
        ttk.Checkbutton(options_frame, text="–í–∫–ª—é—á–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã", 
                       variable=self.include_hidden).grid(row=0, column=0, sticky=tk.W, padx=(0, 20))
        
        self.show_details = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", 
                       variable=self.show_details).grid(row=0, column=1, sticky=tk.W)
        
        # –§–∏–ª—å—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        ttk.Label(settings_frame, text="–§–∏–ª—å—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:").grid(row=1, column=0, sticky=tk.W, pady=(10, 0))
        
        self.extensions_var = tk.StringVar()
        extensions_entry = ttk.Entry(settings_frame, textvariable=self.extensions_var, width=40)
        extensions_entry.grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=(10, 0))
        
        ttk.Label(settings_frame, text="(–Ω–∞–ø—Ä–∏–º–µ—Ä: .txt .py .jpg)", font=('Arial', 8)).grid(
            row=2, column=1, sticky=tk.W, padx=(10, 0), pady=(2, 0))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.grid(row=3, column=0, columnspan=3, pady=(0, 10))
        
        self.scan_button = ttk.Button(buttons_frame, text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", 
                                     command=self.start_scan, style='Accent.TButton')
        self.scan_button.grid(row=0, column=0, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=self.save_results).grid(row=0, column=1, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", 
                  command=self.clear_results).grid(row=0, column=2, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="‚ùì –°–ø—Ä–∞–≤–∫–∞", 
                  command=self.show_help).grid(row=0, column=3)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
        self.progress = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 5))
        
        progress_label = ttk.Label(main_frame, textvariable=self.progress_var)
        progress_label.grid(row=5, column=0, columnspan=3, pady=(0, 10))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_frame = ttk.LabelFrame(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", padding="5")
        results_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        results_frame.columnconfigure(0, weight=1)
        results_frame.rowconfigure(1, weight=1)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_var = tk.StringVar(value="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        stats_label = ttk.Label(results_frame, textvariable=self.stats_var, font=('Arial', 10, 'bold'))
        stats_label.grid(row=0, column=0, sticky=tk.W, pady=(0, 5))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        columns = ('name', 'path', 'size', 'extension', 'modified')
        self.tree = ttk.Treeview(results_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.tree.heading('name', text='–ò–º—è —Ñ–∞–π–ª–∞')
        self.tree.heading('path', text='–ü—É—Ç—å')
        self.tree.heading('size', text='–†–∞–∑–º–µ—Ä (MB)')
        self.tree.heading('extension', text='–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ')
        self.tree.heading('modified', text='–ò–∑–º–µ–Ω–µ–Ω')
        
        self.tree.column('name', width=200)
        self.tree.column('path', width=300)
        self.tree.column('size', width=100)
        self.tree.column('extension', width=100)
        self.tree.column('modified', width=150)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(results_frame, orient=tk.HORIZONTAL, command=self.tree.xview)
        self.tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–≤
        self.tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        v_scrollbar.grid(row=1, column=1, sticky=(tk.N, tk.S))
        h_scrollbar.grid(row=2, column=0, sticky=(tk.W, tk.E))
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.create_context_menu()
    
    def create_context_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.context_menu = Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å", command=self.copy_path)
        self.context_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", command=self.open_folder)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞", command=self.show_properties)
        
        self.tree.bind("<Button-3>", self.show_context_menu)  # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            self.context_menu.post(event.x_root, event.y_root)
    
    def copy_path(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            path = self.tree.item(item)['values'][1]  # –ø—É—Ç—å - –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç
            self.root.clipboard_clear()
            self.root.clipboard_append(path)
            messagebox.showinfo("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", f"–ü—É—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:\n{path}")
    
    def open_folder(self):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            path = self.tree.item(item)['values'][1]
            folder = os.path.dirname(path)
            try:
                if os.name == 'nt':  # Windows
                    os.startfile(folder)
                elif os.name == 'posix':  # macOS and Linux
                    os.system(f'open "{folder}"' if sys.platform == 'darwin' else f'xdg-open "{folder}"')
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")
    
    def show_properties(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞"""
        item = self.tree.selection()[0] if self.tree.selection() else None
        if item:
            values = self.tree.item(item)['values']
            name, path, size, ext, modified = values
            
            # –ù–∞–π—Ç–∏ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = None
            for f in self.files_data:
                if f['full_path'] == path:
                    file_info = f
                    break
            
            if file_info:
                props_text = f"""–°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞:

–ò–º—è: {file_info['name']}
–ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {file_info['full_path']}
–†–∞–∑–º–µ—Ä: {file_info['size_mb']} MB ({file_info['size_bytes']} –±–∞–π—Ç)
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_info['extension']}
–°–æ–∑–¥–∞–Ω: {file_info['created_date']}
–ò–∑–º–µ–Ω–µ–Ω: {file_info['modified_date']}
–ü–∞–ø–∫–∞: {file_info['directory']}"""
                
                messagebox.showinfo("–°–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞", props_text)
    
    def browse_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        if folder:
            self.folder_var.set(folder)
    
    def start_scan(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        folder = self.folder_var.get().strip()
        if not folder:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        if not os.path.exists(folder):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        if self.scanning:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!")
            return
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.scan_files, args=(folder,))
        thread.daemon = True
        thread.start()
    
    def scan_files(self, directory):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        self.scanning = True
        self.scan_button.config(state='disabled')
        self.progress.start()
        self.progress_var.set("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        
        try:
            self.files_data = []
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            include_hidden = self.include_hidden.get()
            extensions_text = self.extensions_var.get().strip()
            file_extensions = None
            
            if extensions_text:
                file_extensions = [ext.strip().lower() for ext in extensions_text.split() if ext.strip()]
            
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            for root, dirs, files in os.walk(directory):
                # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not include_hidden:
                    dirs[:] = [d for d in dirs if not d.startswith('.')]
                
                for file in files:
                    if not include_hidden and file.startswith('.'):
                        continue
                    
                    file_path = os.path.join(root, file)
                    file_ext = os.path.splitext(file)[1].lower()
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
                    if file_extensions and file_ext not in file_extensions:
                        continue
                    
                    try:
                        stat = os.stat(file_path)
                        file_info = {
                            'name': file,
                            'full_path': file_path,
                            'relative_path': os.path.relpath(file_path, directory),
                            'directory': root,
                            'extension': file_ext or '–Ω–µ—Ç',
                            'size_bytes': stat.st_size,
                            'size_mb': round(stat.st_size / (1024 * 1024), 3),
                            'modified_date': datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S'),
                            'created_date': datetime.fromtimestamp(stat.st_ctime).strftime('%Y-%m-%d %H:%M:%S')
                        }
                        self.files_data.append(file_info)
                    except (PermissionError, OSError):
                        continue
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self.update_results)
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}"))
        finally:
            self.scanning = False
            self.root.after(0, self.scan_complete)
    
    def scan_complete(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.progress.stop()
        self.scan_button.config(state='normal')
        self.progress_var.set("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def update_results(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for file_info in self.files_data:
            self.tree.insert('', 'end', values=(
                file_info['name'],
                file_info['full_path'],
                file_info['size_mb'],
                file_info['extension'],
                file_info['modified_date']
            ))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.update_statistics()
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.files_data:
            self.stats_var.set("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        total_files = len(self.files_data)
        total_size_mb = sum(f['size_mb'] for f in self.files_data)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
        extensions = {}
        for file_info in self.files_data:
            ext = file_info['extension']
            extensions[ext] = extensions.get(ext, 0) + 1
        
        # –¢–æ–ø-5 —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        top_extensions = sorted(extensions.items(), key=lambda x: x[1], reverse=True)[:5]
        ext_text = ", ".join([f"{ext}: {count}" for ext, count in top_extensions])
        
        stats_text = f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files} | –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.2f} MB | –¢–æ–ø —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {ext_text}"
        self.stats_var.set(stats_text)
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.files_data:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return
        
        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        save_window = tk.Toplevel(self.root)
        save_window.title("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        save_window.geometry("300x200")
        save_window.transient(self.root)
        save_window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        save_window.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() // 2) - (300 // 2)
        y = self.root.winfo_y() + (self.root.winfo_height() // 2) - (200 // 2)
        save_window.geometry(f"300x200+{x}+{y}")
        
        ttk.Label(save_window, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:", font=('Arial', 12)).pack(pady=20)
        
        format_var = tk.StringVar(value="txt")
        
        ttk.Radiobutton(save_window, text="–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)", 
                       variable=format_var, value="txt").pack(anchor=tk.W, padx=50)
        ttk.Radiobutton(save_window, text="CSV —Ñ–∞–π–ª (.csv)", 
                       variable=format_var, value="csv").pack(anchor=tk.W, padx=50)
        ttk.Radiobutton(save_window, text="JSON —Ñ–∞–π–ª (.json)", 
                       variable=format_var, value="json").pack(anchor=tk.W, padx=50)
        
        buttons_frame = ttk.Frame(save_window)
        buttons_frame.pack(pady=20)
        
        def do_save():
            format_type = format_var.get()
            save_window.destroy()
            self.save_file(format_type)
        
        ttk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=do_save).pack(side=tk.LEFT, padx=10)
        ttk.Button(buttons_frame, text="–û—Ç–º–µ–Ω–∞", command=save_window.destroy).pack(side=tk.LEFT)
    
    def save_file(self, format_type):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"files_scan_{timestamp}.{format_type}"
        
        file_path = filedialog.asksaveasfilename(
            defaultextension=f".{format_type}",
            filetypes=[(f"{format_type.upper()} files", f"*.{format_type}"), ("All files", "*.*")],
            initialname=filename
        )
        
        if not file_path:
            return
        
        try:
            if format_type == 'txt':
                self.save_to_txt(file_path)
            elif format_type == 'csv':
                self.save_to_csv(file_path)
            elif format_type == 'json':
                self.save_to_json(file_path)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    
    def save_to_txt(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ò –§–ê–ô–õ–û–í\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"–î–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {self.folder_var.get()}\n")
            f.write(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.files_data)}\n")
            f.write(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {sum(f['size_mb'] for f in self.files_data):.2f} MB\n\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
            extensions = {}
            for file_info in self.files_data:
                ext = file_info['extension']
                extensions[ext] = extensions.get(ext, 0) + 1
            
            f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ê–°–®–ò–†–ï–ù–ò–Ø–ú:\n")
            f.write("-" * 30 + "\n")
            for ext, count in sorted(extensions.items(), key=lambda x: x[1], reverse=True):
                f.write(f"{ext}: {count} —Ñ–∞–π–ª–æ–≤\n")
            
            f.write("\n" + "–°–ü–ò–°–û–ö –§–ê–ô–õ–û–í:\n")
            f.write("-" * 30 + "\n")
            for file_info in self.files_data:
                f.write(f"{file_info['full_path']} ({file_info['size_mb']} MB)\n")
    
    def save_to_csv(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV —Ñ–∞–π–ª"""
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=[
                'name', 'full_path', 'relative_path', 'directory', 
                'extension', 'size_bytes', 'size_mb', 'modified_date', 'created_date'
            ])
            writer.writeheader()
            writer.writerows(self.files_data)
    
    def save_to_json(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª"""
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        extensions = {}
        for file_info in self.files_data:
            ext = file_info['extension']
            extensions[ext] = extensions.get(ext, 0) + 1
        
        data = {
            'scan_info': {
                'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'scanned_folder': self.folder_var.get(),
                'total_files': len(self.files_data),
                'total_size_mb': round(sum(f['size_mb'] for f in self.files_data), 2),
                'extensions_stats': extensions
            },
            'files': self.files_data
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    
    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.files_data = []
        
        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_var.set("–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
        self.progress_var.set("–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üóÇÔ∏è –°–ö–ê–ù–ï–† –§–ê–ô–õ–û–í - –°–ü–†–ê–í–ö–ê

–û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–æ–∫
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT, CSV, JSON

–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–ø—Ü–∏–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
3. –ù–∞–∂–º–∏—Ç–µ "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å"
4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç (–ø–æ –∂–µ–ª–∞–Ω–∏—é)

–§–ò–õ–¨–¢–† –†–ê–°–®–ò–†–ï–ù–ò–ô:
–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:
.txt .py .jpg .doc

–ö–û–ù–¢–ï–ö–°–¢–ù–û–ï –ú–ï–ù–Æ:
–ü–ö–ú –ø–æ —Ñ–∞–π–ª—É ‚Üí –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å, –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É

–ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò:
F5 - –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
Del - –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

–ê–í–¢–û–†: File Scanner v2.0
"""
        
        messagebox.showinfo("–°–ø—Ä–∞–≤–∫–∞", help_text)

def main():
    root = tk.Tk()
    app = FileScannerGUI(root)
    
    # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    root.bind('<F5>', lambda e: app.start_scan())
    root.bind('<Control-s>', lambda e: app.save_results())
    root.bind('<Delete>', lambda e: app.clear_results())
    
    root.mainloop()

if __name__ == "__main__":
    main()